{"action_msgs/msg/GoalInfo": "# Goal ID\nunique_identifier_msgs/UUID goal_id\n\t#\n\tuint8[16] uuid\n\n# Time when the goal was accepted\nbuiltin_interfaces/Time stamp\n\tint32 sec\n\tuint32 nanosec", "action_msgs/msg/GoalStatus": "# An action goal can be in one of these states after it is accepted by an action\n# server.\n#\n# For more information, see http://design.ros2.org/articles/actions.html\n\n# Indicates status has not been properly set.\nint8 STATUS_UNKNOWN   = 0\n\n# The goal has been accepted and is awaiting execution.\nint8 STATUS_ACCEPTED  = 1\n\n# The goal is currently being executed by the action server.\nint8 STATUS_EXECUTING = 2\n\n# The client has requested that the goal be canceled and the action server has\n# accepted the cancel request.\nint8 STATUS_CANCELING = 3\n\n# The goal was achieved successfully by the action server.\nint8 STATUS_SUCCEEDED = 4\n\n# The goal was canceled after an external request from an action client.\nint8 STATUS_CANCELED  = 5\n\n# The goal was terminated by the action server without an external request.\nint8 STATUS_ABORTED   = 6\n\n# Goal info (contains ID and timestamp).\nGoalInfo goal_info\n\tunique_identifier_msgs/UUID goal_id\n\t\t#\n\t\tuint8[16] uuid\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\n# Action goal state-machine status.\nint8 status", "action_msgs/msg/GoalStatusArray": "# An array of goal statuses.\nGoalStatus[] status_list\n\t#\n\tint8 STATUS_UNKNOWN   = 0\n\tint8 STATUS_ACCEPTED  = 1\n\tint8 STATUS_EXECUTING = 2\n\tint8 STATUS_CANCELING = 3\n\tint8 STATUS_SUCCEEDED = 4\n\tint8 STATUS_CANCELED  = 5\n\tint8 STATUS_ABORTED   = 6\n\tGoalInfo goal_info\n\t\tunique_identifier_msgs/UUID goal_id\n\t\t\t#\n\t\t\tuint8[16] uuid\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\tint8 status", "actionlib_msgs/msg/GoalID": "\n# The stamp should store the time at which this goal was requested.\n# It is used by an action server when it tries to preempt all\n# goals that were requested before a certain time\nbuiltin_interfaces/Time stamp\n\tint32 sec\n\tuint32 nanosec\n\n# The id provides a way to associate feedback and\n# result message with specific goal requests. The id\n# specified must be unique.\nstring id", "actionlib_msgs/msg/GoalStatus": "GoalID goal_id\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring id\nuint8 status\nuint8 PENDING         = 0   # The goal has yet to be processed by the action server.\nuint8 ACTIVE          = 1   # The goal is currently being processed by the action server.\nuint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n                            #   and has since completed its execution (Terminal State).\nuint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server\n                            #   (Terminal State).\nuint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n                            #    to some failure (Terminal State).\nuint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n                            #    because the goal was unattainable or invalid (Terminal State).\nuint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n                            #    and has not yet completed execution.\nuint8 RECALLING       = 7   # The goal received a cancel request before it started executing, but\n                            #    the action server has not yet confirmed that the goal is canceled.\nuint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n                            #    and was successfully cancelled (Terminal State).\nuint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not\n                            #    be sent over the wire by an action server.\n\n# Allow for the user to associate a string with GoalStatus for debugging.\nstring text", "actionlib_msgs/msg/GoalStatusArray": "# Stores the statuses for goals that are currently being tracked\n# by an action server\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\nGoalStatus[] status_list\n\tGoalID goal_id\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring id\n\tuint8 status\n\tuint8 PENDING         = 0\n\tuint8 ACTIVE          = 1\n\tuint8 PREEMPTED       = 2\n\t                            #   and has since completed its execution (Terminal State).\n\tuint8 SUCCEEDED       = 3\n\t                            #   (Terminal State).\n\tuint8 ABORTED         = 4\n\t                            #    to some failure (Terminal State).\n\tuint8 REJECTED        = 5\n\t                            #    because the goal was unattainable or invalid (Terminal State).\n\tuint8 PREEMPTING      = 6\n\t                            #    and has not yet completed execution.\n\tuint8 RECALLING       = 7\n\t                            #    the action server has not yet confirmed that the goal is canceled.\n\tuint8 RECALLED        = 8\n\t                            #    and was successfully cancelled (Terminal State).\n\tuint8 LOST            = 9\n\t                            #    be sent over the wire by an action server.\n\tstring text", "builtin_interfaces/msg/Duration": "# Duration defines a period between two time points.\n# Messages of this datatype are of ROS Time following this design:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# Seconds component, range is valid over any possible int32 value.\nint32 sec\n\n# Nanoseconds component in the range of [0, 10e9).\nuint32 nanosec", "builtin_interfaces/msg/Time": "# This message communicates ROS Time defined here:\n# https://design.ros2.org/articles/clock_and_time.html\n\n# The seconds component, valid over all int32 values.\nint32 sec\n\n# The nanoseconds component, valid in the range [0, 10e9).\nuint32 nanosec", "control_msgs/msg/DynamicJointState": "std_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\n# List of resource names, e.g. [\"arm_joint_1\", \"arm_joint_2\", \"gripper_joint\"]\nstring[] joint_names\n# Key-value pairs representing interfaces and their corresponding values for each joint listed in `joint_names`\nInterfaceValue[] interface_values\n\tstring[] interface_names\n\tfloat64[] values", "control_msgs/msg/GripperCommand": "float64 position\nfloat64 max_effort", "control_msgs/msg/InterfaceValue": "# List of resource interface names\nstring[] interface_names\n# Values corresponding to the list of interfaces in `interface_names`, [1.0, 0.0] for example\nfloat64[] values", "control_msgs/msg/JointComponentTolerance": "# Version of JointTolerance.msg with added component field for joints with multiple degrees of freedom\n# The difference between two MultiDOFJointTrajectoryPoint cannot be represented as a single number,\n# hence we use the component field to represent how to calculate the difference in a way that can\n# be represented as a single number.\n\n# Since each joint has multiple degrees of freedom,\n# there can be multiple tolerances for each joint, each looking\n# at different components.\n\n# If the component is X_AXIS, Y_AXIS, or Z_AXIS, then the tolerance\n# is only applied for the specific axis.\n# However, if the component is TRANSLATION, then the tolerance is for\n# the overall Euclidean distance.\n# For these components, the units are meters, meters/sec and meters/sec^2.\n# Z_AXIS is only valid with a floating joint, not planar.\n\n# If the component is ROTATION the tolerance is measured in\n# radians, radians/sec and radians/sec^2, computed\n# between the difference in quaternions.\n\nuint16 X_AXIS=1\nuint16 Y_AXIS=2\nuint16 Z_AXIS=3\nuint16 TRANSLATION=4\nuint16 ROTATION=5\n\nstring joint_name\nuint16 component\nfloat64 position\nfloat64 velocity\nfloat64 acceleration", "control_msgs/msg/JointControllerState": "# This message presents current controller state of one joint.\n\n# Header timestamp should be update time of controller state\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\n# The set point, that is, desired state.\nfloat64 set_point\n\n# Current value of the process (ie: latest sensor measurement on the controlled value).\nfloat64 process_value\n\n# First time-derivative of the process value.\nfloat64 process_value_dot\n\n# The error of the controlled value, essentially process_value - set_point (for a regular PID implementation).\nfloat64 error\n\n# Time between two consecutive updates/execution of the control law.\nfloat64 time_step\n\n# Current output of the controller.\nfloat64 command\n\n# Current PID parameters of the controller.\nfloat64 p\nfloat64 i\nfloat64 d\nfloat64 i_clamp\nbool antiwindup", "control_msgs/msg/JointJog": "# Used in time-stamping the message.\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\n# Name list of the joints. You don't need to specify all joints of the\n# robot. Joint names are case-sensitive.\nstring[] joint_names\n\n# A position command to the joints listed in joint_names.\n# The order must be identical.\n# Units are meters or radians.\n# If displacements and velocities are filled, a profiled motion is requested.\nfloat64[] displacements # or position_deltas\n\n# A velocity command to the joints listed in joint_names.\n# The order must be identical.\n# Units are m/s or rad/s.\n# If displacements and velocities are filled, a profiled motion is requested.\nfloat64[] velocities\n\nfloat64 duration", "control_msgs/msg/JointTolerance": "# The tolerances specify the amount the position, velocity, and\n# accelerations can vary from the setpoints.  For example, in the case\n# of trajectory control, when the actual position varies beyond\n# (desired position + position tolerance), the trajectory goal may\n# abort.\n#\n# There are two special values for tolerances:\n#  * 0 - The tolerance is unspecified and will remain at whatever the default is\n#  * -1 - The tolerance is \"erased\".  If there was a default, the joint will be\n#         allowed to move without restriction.\n\nstring name\nfloat64 position  # in radians or meters (for a revolute or prismatic joint, respectively)\nfloat64 velocity  # in rad/sec or m/sec\nfloat64 acceleration  # in rad/sec^2 or m/sec^2", "control_msgs/msg/JointTrajectoryControllerState": "std_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\nstring[] joint_names\ntrajectory_msgs/JointTrajectoryPoint desired\n\tfloat64[] positions\n\tfloat64[] velocities\n\tfloat64[] accelerations\n\tfloat64[] effort\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec\ntrajectory_msgs/JointTrajectoryPoint actual\n\tfloat64[] positions\n\tfloat64[] velocities\n\tfloat64[] accelerations\n\tfloat64[] effort\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec\ntrajectory_msgs/JointTrajectoryPoint error  # Redundant, but useful\n\tfloat64[] positions\n\tfloat64[] velocities\n\tfloat64[] accelerations\n\tfloat64[] effort\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec", "control_msgs/msg/PidState": "std_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\nbuiltin_interfaces/Duration timestep\n\tint32 sec\n\tuint32 nanosec\nfloat64 error\nfloat64 error_dot\nfloat64 p_error\nfloat64 i_error\nfloat64 d_error\nfloat64 p_term\nfloat64 i_term\nfloat64 d_term\nfloat64 i_max\nfloat64 i_min\nfloat64 output", "diagnostic_msgs/msg/DiagnosticArray": "# This message is used to send diagnostic information about the state of the robot.\nstd_msgs/Header header # for timestamp\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\nDiagnosticStatus[] status # an array of components being reported on\n\tbyte OK=0\n\tbyte WARN=1\n\tbyte ERROR=2\n\tbyte STALE=3\n\tbyte level\n\tstring name\n\tstring message\n\tstring hardware_id\n\tKeyValue[] values\n\t\tstring key\n\t\tstring value", "diagnostic_msgs/msg/DiagnosticStatus": "# This message holds the status of an individual component of the robot.\n\n# Possible levels of operations.\nbyte OK=0\nbyte WARN=1\nbyte ERROR=2\nbyte STALE=3\n\n# Level of operation enumerated above.\nbyte level\n# A description of the test/component reporting.\nstring name\n# A description of the status.\nstring message\n# A hardware unique string.\nstring hardware_id\n# An array of values associated with the status.\nKeyValue[] values\n\tstring key\n\tstring value\n", "diagnostic_msgs/msg/KeyValue": "# What to label this value when viewing.\nstring key\n# A value to track over time.\nstring value", "example_interfaces/msg/Bool": "# This is an example message of using a primitive datatype, bool.\n# If you want to test with this that's fine, but if you are deploying\n# it into a system you should create a semantically meaningful message type.\n# If you want to embed it in another message, use the primitive data type instead.\nbool data", "example_interfaces/msg/Byte": "# This is an example message of using a primitive datatype, byte.\n# If you want to test with this that's fine, but if you are deploying\n# it into a system you should create a semantically meaningful message type.\n# If you want to embed it in another message, use the primitive data type instead.\nbyte data", "example_interfaces/msg/ByteMultiArray": "# This is an example of using complex datatypes.\n# It is not recommended to use directly.\n# To use a similar datastruct please define a custom message with appropriate semantic meaning.\n\n# Please look at the MultiArrayLayout message definition for\n# documentation on all multiarrays.\n\nMultiArrayLayout  layout        # specification of data layout\n\t#\n\t#\n\t#\n\t#\n\t#\n\tMultiArrayDimension[] dim\n\t\tstring label\n\t\tuint32 size\n\t\tuint32 stride\n\tuint32 data_offset\nbyte[]            data          # array of data", "example_interfaces/msg/Char": "# This is an example message of using a primitive datatype, char.\n# If you want to test with this that's fine, but if you are deploying\n# it into a system you should create a semantically meaningful message type.\n# If you want to embed it in another message, use the primitive data type instead.\nchar data", "example_interfaces/msg/Empty": "# If you want to test with this that's fine, but if you are deploying\n# it into a system you should create a semantically meaningful message type.", "example_interfaces/msg/Float32": "# This is an example message of using a primitive datatype, float32.\n# If you want to test with this that's fine, but if you are deploying\n# it into a system you should create a semantically meaningful message type.\n# If you want to embed it in another message, use the primitive data type instead.\nfloat32 data", "example_interfaces/msg/Float32MultiArray": "# This is an example of using complex datatypes.\n# It is not recommended to use directly.\n# To use a similar datastruct please define a custom message with appropriate semantic meaning.\n\n# Please look at the MultiArrayLayout message definition for\n# documentation on all multiarrays.\n\nMultiArrayLayout  layout        # specification of data layout\n\t#\n\t#\n\t#\n\t#\n\t#\n\tMultiArrayDimension[] dim\n\t\tstring label\n\t\tuint32 size\n\t\tuint32 stride\n\tuint32 data_offset\nfloat32[]         data          # array of data", "example_interfaces/msg/Float64": "# This is an example message of using a primitive datatype, float64.\n# If you want to test with this that's fine, but if you are deploying\n# it into a system you should create a semantically meaningful message type.\n# If you want to embed it in another message, use the primitive data type instead.\nfloat64 data", "example_interfaces/msg/Float64MultiArray": "# This is an example of using complex datatypes.\n# It is not recommended to use directly.\n# To use a similar datastruct please define a custom message with appropriate semantic meaning.\n\n# Please look at the MultiArrayLayout message definition for\n# documentation on all multiarrays.\n\nMultiArrayLayout  layout        # specification of data layout\n\t#\n\t#\n\t#\n\t#\n\t#\n\tMultiArrayDimension[] dim\n\t\tstring label\n\t\tuint32 size\n\t\tuint32 stride\n\tuint32 data_offset\nfloat64[]         data          # array of data", "example_interfaces/msg/Int16": "# This is an example message of using a primitive datatype, int16.\n# If you want to test with this that's fine, but if you are deploying\n# it into a system you should create a semantically meaningful message type.\n# If you want to embed it in another message, use the primitive data type instead.\nint16 data", "example_interfaces/msg/Int16MultiArray": "# This is an example of using complex datatypes.\n# It is not recommended to use directly.\n# To use a similar datastruct please define a custom message with appropriate semantic meaning.\n\n# Please look at the MultiArrayLayout message definition for\n# documentation on all multiarrays.\n\nMultiArrayLayout  layout        # specification of data layout\n\t#\n\t#\n\t#\n\t#\n\t#\n\tMultiArrayDimension[] dim\n\t\tstring label\n\t\tuint32 size\n\t\tuint32 stride\n\tuint32 data_offset\nint16[]           data          # array of data", "example_interfaces/msg/Int32": "# This is an example message of using a primitive datatype, int32.\n# If you want to test with this that's fine, but if you are deploying\n# it into a system you should create a semantically meaningful message type.\n# If you want to embed it in another message, use the primitive data type instead.\nint32 data", "example_interfaces/msg/Int32MultiArray": "# This is an example of using complex datatypes.\n# It is not recommended to use directly.\n# To use a similar datastruct please define a custom message with appropriate semantic meaning.\n\n# Please look at the MultiArrayLayout message definition for\n# documentation on all multiarrays.\n\nMultiArrayLayout  layout        # specification of data layout\n\t#\n\t#\n\t#\n\t#\n\t#\n\tMultiArrayDimension[] dim\n\t\tstring label\n\t\tuint32 size\n\t\tuint32 stride\n\tuint32 data_offset\nint32[]           data          # array of data", "example_interfaces/msg/Int64": "# This is an example message of using a primitive datatype, int64.\n# If you want to test with this that's fine, but if you are deploying\n# it into a system you should create a semantically meaningful message type.\n# If you want to embed it in another message, use the primitive data type instead.\nint64 data", "example_interfaces/msg/Int64MultiArray": "# This is an example of using complex datatypes.\n# It is not recommended to use directly.\n# To use a similar datastruct please define a custom message with appropriate semantic meaning.\n\n# Please look at the MultiArrayLayout message definition for\n# documentation on all multiarrays.\n\nMultiArrayLayout  layout        # specification of data layout\n\t#\n\t#\n\t#\n\t#\n\t#\n\tMultiArrayDimension[] dim\n\t\tstring label\n\t\tuint32 size\n\t\tuint32 stride\n\tuint32 data_offset\nint64[]           data          # array of data", "example_interfaces/msg/Int8": "# This is an example message of using a primitive datatype, in8.\n# If you want to test with this that's fine, but if you are deploying\n# it into a system you should create a semantically meaningful message type.\n# If you want to embed it in another message, use the primitive data type instead.\nint8 data", "example_interfaces/msg/Int8MultiArray": "# This is an example of using complex datatypes.\n# It is not recommended to use directly.\n# To use a similar datastruct please define a custom message with appropriate semantic meaning.\n\n# Please look at the MultiArrayLayout message definition for\n# documentation on all multiarrays.\n\nMultiArrayLayout  layout        # specification of data layout\n\t#\n\t#\n\t#\n\t#\n\t#\n\tMultiArrayDimension[] dim\n\t\tstring label\n\t\tuint32 size\n\t\tuint32 stride\n\tuint32 data_offset\nint8[]            data          # array of data", "example_interfaces/msg/MultiArrayDimension": "# This is an example of using complex datatypes.\n# It is not recommended to use directly.\n# To use a similar datastruct please define a custom message with appropriate semantic meaning.\n\nstring label   # label of given dimension\nuint32 size    # size of given dimension (in type units)\nuint32 stride  # stride of given dimension", "example_interfaces/msg/MultiArrayLayout": "# This is an example of using complex datatypes.\n# It is not recommended to use directly.\n# To use a similar datastruct please define a custom message with appropriate semantic meaning.\n\n# The multiarray declares a generic multi-dimensional array of a\n# particular data type.  Dimensions are ordered from outer most\n# to inner most.\n#\n# Accessors should ALWAYS be written in terms of dimension stride\n# and specified outer-most dimension first.\n#\n# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n#\n# A standard, 3-channel 640x480 image with interleaved color channels\n# would be specified as:\n#\n# dim[0].label  = \"height\"\n# dim[0].size   = 480\n# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n# dim[1].label  = \"width\"\n# dim[1].size   = 640\n# dim[1].stride = 3*640 = 1920\n# dim[2].label  = \"channel\"\n# dim[2].size   = 3\n# dim[2].stride = 3\n#\n# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n\nMultiArrayDimension[] dim # Array of dimension properties\n\tstring label\n\tuint32 size\n\tuint32 stride\nuint32 data_offset        # padding bytes at front of data", "example_interfaces/msg/String": "# This is an example message of using a primitive datatype, string.\n# If you want to test with this that's fine, but if you are deploying\n# it into a system you should create a semantically meaningful message type.\n# If you want to embed it in another message, use the primitive data type instead.\nstring data", "example_interfaces/msg/UInt16": "# This is an example message of using a primitive datatype, uint16.\n# If you want to test with this that's fine, but if you are deploying\n# it into a system you should create a semantically meaningful message type.\n# If you want to embed it in another message, use the primitive data type instead.\nuint16 data", "example_interfaces/msg/UInt16MultiArray": "# This is an example of using complex datatypes.\n# It is not recommended to use directly.\n# To use a similar datastruct please define a custom message with appropriate semantic meaning.\n\n# Please look at the MultiArrayLayout message definition for\n# documentation on all multiarrays.\n\nMultiArrayLayout  layout        # specification of data layout\n\t#\n\t#\n\t#\n\t#\n\t#\n\tMultiArrayDimension[] dim\n\t\tstring label\n\t\tuint32 size\n\t\tuint32 stride\n\tuint32 data_offset\nuint16[]            data        # array of data", "example_interfaces/msg/UInt32": "# This is an example message of using a primitive datatype, uint32.\n# If you want to test with this that's fine, but if you are deploying\n# it into a system you should create a semantically meaningful message type.\n# If you want to embed it in another message, use the primitive data type instead.\nuint32 data", "example_interfaces/msg/UInt32MultiArray": "# This is an example of using complex datatypes.\n# It is not recommended to use directly.\n# To use a similar datastruct please define a custom message with appropriate semantic meaning.\n\n# Please look at the MultiArrayLayout message definition for\n# documentation on all multiarrays.\n\nMultiArrayLayout  layout        # specification of data layout\n\t#\n\t#\n\t#\n\t#\n\t#\n\tMultiArrayDimension[] dim\n\t\tstring label\n\t\tuint32 size\n\t\tuint32 stride\n\tuint32 data_offset\nuint32[]          data          # array of data", "example_interfaces/msg/UInt64": "# This is an example message of using a primitive datatype, unint64.\n# If you want to test with this that's fine, but if you are deploying\n# it into a system you should create a semantically meaningful message type.\n# If you want to embed it in another message, use the primitive data type instead.\nuint64 data", "example_interfaces/msg/UInt64MultiArray": "# This is an example of using complex datatypes.\n# It is not recommended to use directly.\n# To use a similar datastruct please define a custom message with appropriate semantic meaning.\n\n# Please look at the MultiArrayLayout message definition for\n# documentation on all multiarrays.\n\nMultiArrayLayout  layout        # specification of data layout\n\t#\n\t#\n\t#\n\t#\n\t#\n\tMultiArrayDimension[] dim\n\t\tstring label\n\t\tuint32 size\n\t\tuint32 stride\n\tuint32 data_offset\nuint64[]          data          # array of data", "example_interfaces/msg/UInt8": "# This is an example message of using a primitive datatype, uint8.\n# If you want to test with this that's fine, but if you are deploying\n# it into a system you should create a semantically meaningful message type.\n# If you want to embed it in another message, use the primitive data type instead.\nuint8 data", "example_interfaces/msg/UInt8MultiArray": "# This is an example of using complex datatypes.\n# It is not recommended to use directly.\n# To use a similar datastruct please define a custom message with appropriate semantic meaning.\n\n# Please look at the MultiArrayLayout message definition for\n# documentation on all multiarrays.\n\nMultiArrayLayout  layout        # specification of data layout\n\t#\n\t#\n\t#\n\t#\n\t#\n\tMultiArrayDimension[] dim\n\t\tstring label\n\t\tuint32 size\n\t\tuint32 stride\n\tuint32 data_offset\nuint8[]           data          # array of data", "example_interfaces/msg/WString": "# This is an example message of using a primitive datatype, wstring.\n# If you want to test with this that's fine, but if you are deploying\n# it into a system you should create a semantically meaningful message type.\n# If you want to embed it in another message, use the primitive data type instead.\nwstring data", "geometry_msgs/msg/Accel": "# This expresses acceleration in free space broken into its linear and angular parts.\nVector3  linear\n\tfloat64 x\n\tfloat64 y\n\tfloat64 z\nVector3  angular\n\tfloat64 x\n\tfloat64 y\n\tfloat64 z", "geometry_msgs/msg/AccelStamped": "# An accel with reference coordinate frame and timestamp\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\nAccel accel\n\tVector3  linear\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tVector3  angular\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z", "geometry_msgs/msg/AccelWithCovariance": "# This expresses acceleration in free space with uncertainty.\n\nAccel accel\n\tVector3  linear\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tVector3  angular\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\n# Row-major representation of the 6x6 covariance matrix\n# The orientation parameters use a fixed-axis representation.\n# In order, the parameters are:\n# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\nfloat64[36] covariance", "geometry_msgs/msg/AccelWithCovarianceStamped": "# This represents an estimated accel with reference coordinate frame and timestamp.\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\nAccelWithCovariance accel\n\tAccel accel\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tfloat64[36] covariance", "geometry_msgs/msg/Inertia": "# Mass [kg]\nfloat64 m\n\n# Center of mass [m]\ngeometry_msgs/Vector3 com\n\tfloat64 x\n\tfloat64 y\n\tfloat64 z\n\n# Inertia Tensor [kg-m^2]\n#     | ixx ixy ixz |\n# I = | ixy iyy iyz |\n#     | ixz iyz izz |\nfloat64 ixx\nfloat64 ixy\nfloat64 ixz\nfloat64 iyy\nfloat64 iyz\nfloat64 izz", "geometry_msgs/msg/InertiaStamped": "# An Inertia with a time stamp and reference frame.\n\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\nInertia inertia\n\tfloat64 m\n\tgeometry_msgs/Vector3 com\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tfloat64 ixx\n\tfloat64 ixy\n\tfloat64 ixz\n\tfloat64 iyy\n\tfloat64 iyz\n\tfloat64 izz", "geometry_msgs/msg/Point": "# This contains the position of a point in free space\nfloat64 x\nfloat64 y\nfloat64 z", "geometry_msgs/msg/Point32": "# This contains the position of a point in free space(with 32 bits of precision).\n# It is recommended to use Point wherever possible instead of Point32.\n#\n# This recommendation is to promote interoperability.\n#\n# This message is designed to take up less space when sending\n# lots of points at once, as in the case of a PointCloud.\n\nfloat32 x\nfloat32 y\nfloat32 z", "geometry_msgs/msg/PointStamped": "# This represents a Point with reference coordinate frame and timestamp\n\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\nPoint point\n\tfloat64 x\n\tfloat64 y\n\tfloat64 z", "geometry_msgs/msg/Polygon": "# A specification of a polygon where the first and last points are assumed to be connected\n\nPoint32[] points\n\t#\n\t#\n\tfloat32 x\n\tfloat32 y\n\tfloat32 z", "geometry_msgs/msg/PolygonStamped": "# This represents a Polygon with reference coordinate frame and timestamp\n\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\nPolygon polygon\n\tPoint32[] points\n\t\t#\n\t\t#\n\t\tfloat32 x\n\t\tfloat32 y\n\t\tfloat32 z", "geometry_msgs/msg/Pose": "# A representation of pose in free space, composed of position and orientation.\n\nPoint position\n\tfloat64 x\n\tfloat64 y\n\tfloat64 z\nQuaternion orientation\n\tfloat64 x 0\n\tfloat64 y 0\n\tfloat64 z 0\n\tfloat64 w 1", "geometry_msgs/msg/Pose2D": "# Deprecated as of Foxy and will potentially be removed in any following release.\n# Please use the full 3D pose.\n\n# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.\n\n# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.# This expresses a position and orientation on a 2D manifold.\n\nfloat64 x\nfloat64 y\nfloat64 theta", "geometry_msgs/msg/PoseArray": "# An array of poses with a header for global reference.\n\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\nPose[] poses\n\tPoint position\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tQuaternion orientation\n\t\tfloat64 x 0\n\t\tfloat64 y 0\n\t\tfloat64 z 0\n\t\tfloat64 w 1", "geometry_msgs/msg/PoseStamped": "# A Pose with reference coordinate frame and timestamp\n\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\nPose pose\n\tPoint position\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tQuaternion orientation\n\t\tfloat64 x 0\n\t\tfloat64 y 0\n\t\tfloat64 z 0\n\t\tfloat64 w 1", "geometry_msgs/msg/PoseWithCovariance": "# This represents a pose in free space with uncertainty.\n\nPose pose\n\tPoint position\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tQuaternion orientation\n\t\tfloat64 x 0\n\t\tfloat64 y 0\n\t\tfloat64 z 0\n\t\tfloat64 w 1\n\n# Row-major representation of the 6x6 covariance matrix\n# The orientation parameters use a fixed-axis representation.\n# In order, the parameters are:\n# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\nfloat64[36] covariance", "geometry_msgs/msg/PoseWithCovarianceStamped": "# This expresses an estimated pose with a reference coordinate frame and timestamp\n\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\nPoseWithCovariance pose\n\tPose pose\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tfloat64[36] covariance", "geometry_msgs/msg/Quaternion": "# This represents an orientation in free space in quaternion form.\n\nfloat64 x 0\nfloat64 y 0\nfloat64 z 0\nfloat64 w 1", "geometry_msgs/msg/QuaternionStamped": "# This represents an orientation with reference coordinate frame and timestamp.\n\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\nQuaternion quaternion\n\tfloat64 x 0\n\tfloat64 y 0\n\tfloat64 z 0\n\tfloat64 w 1", "geometry_msgs/msg/Transform": "# This represents the transform between two coordinate frames in free space.\n\nVector3 translation\n\tfloat64 x\n\tfloat64 y\n\tfloat64 z\nQuaternion rotation\n\tfloat64 x 0\n\tfloat64 y 0\n\tfloat64 z 0\n\tfloat64 w 1", "geometry_msgs/msg/TransformStamped": "# This expresses a transform from coordinate frame header.frame_id\n# to the coordinate frame child_frame_id at the time of header.stamp\n#\n# This message is mostly used by the\n# <a href=\"https://index.ros.org/p/tf2/\">tf2</a> package.\n# See its documentation for more information.\n#\n# The child_frame_id is necessary in addition to the frame_id\n# in the Header to communicate the full reference for the transform\n# in a self contained message.\n\n# The frame id in the header is used as the reference frame of this transform.\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\n# The frame id of the child frame to which this transform points.\nstring child_frame_id\n\n# Translation and rotation in 3-dimensions of child_frame_id from header.frame_id.\nTransform transform\n\tVector3 translation\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tQuaternion rotation\n\t\tfloat64 x 0\n\t\tfloat64 y 0\n\t\tfloat64 z 0\n\t\tfloat64 w 1", "geometry_msgs/msg/Twist": "# This expresses velocity in free space broken into its linear and angular parts.\n\nVector3  linear\n\tfloat64 x\n\tfloat64 y\n\tfloat64 z\nVector3  angular\n\tfloat64 x\n\tfloat64 y\n\tfloat64 z", "geometry_msgs/msg/TwistStamped": "# A twist with reference coordinate frame and timestamp\n\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\nTwist twist\n\tVector3  linear\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tVector3  angular\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z", "geometry_msgs/msg/TwistWithCovariance": "# This expresses velocity in free space with uncertainty.\n\nTwist twist\n\tVector3  linear\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tVector3  angular\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\n# Row-major representation of the 6x6 covariance matrix\n# The orientation parameters use a fixed-axis representation.\n# In order, the parameters are:\n# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\nfloat64[36] covariance", "geometry_msgs/msg/TwistWithCovarianceStamped": "# This represents an estimated twist with reference coordinate frame and timestamp.\n\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\nTwistWithCovariance twist\n\tTwist twist\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tfloat64[36] covariance", "geometry_msgs/msg/Vector3": "# This represents a vector in free space.\n\n# This is semantically different than a point.\n# A vector is always anchored at the origin.\n# When a transform is applied to a vector, only the rotational component is applied.\n\nfloat64 x\nfloat64 y\nfloat64 z", "geometry_msgs/msg/Vector3Stamped": "# This represents a Vector3 with reference coordinate frame and timestamp\n\n# Note that this follows vector semantics with it always anchored at the origin,\n# so the rotational elements of a transform are the only parts applied when transforming.\n\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\nVector3 vector\n\tfloat64 x\n\tfloat64 y\n\tfloat64 z", "geometry_msgs/msg/Wrench": "# This represents force in free space, separated into its linear and angular parts.\n\nVector3  force\n\tfloat64 x\n\tfloat64 y\n\tfloat64 z\nVector3  torque\n\tfloat64 x\n\tfloat64 y\n\tfloat64 z", "geometry_msgs/msg/WrenchStamped": "# A wrench with reference coordinate frame and timestamp\n\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\nWrench wrench\n\tVector3  force\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tVector3  torque\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z", "libstatistics_collector/msg/DummyMessage": "# This is a dummy message type with a `Header` field.\n# It is intended for use in topic statistics tests.\n\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id", "lifecycle_msgs/msg/State": "# Primary state definitions as depicted in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# These are the primary states. State changes can only be requested when the\n# node is in one of these states.\n\n# Indicates state has not yet been set.\nuint8 PRIMARY_STATE_UNKNOWN = 0\n\n# This is the life cycle state the node is in immediately after being\n# instantiated.\nuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\n# This state represents a node that is not currently performing any processing.\nuint8 PRIMARY_STATE_INACTIVE = 2\n\n# This is the main state of the node\u2019s life cycle. While in this state, the node\n# performs any processing, responds to service requests, reads and processes\n# data, produces output, etc.\nuint8 PRIMARY_STATE_ACTIVE = 3\n\n# The finalized state is the state in which the node ends immediately before\n# being destroyed.\nuint8 PRIMARY_STATE_FINALIZED = 4\n\n# Temporary intermediate states. When a transition is requested, the node\n# changes its state into one of these states.\n\n# In this transition state the node\u2019s onConfigure callback will be called to\n# allow the node to load its configuration and conduct any required setup.\nuint8 TRANSITION_STATE_CONFIGURING = 10\n\n# In this transition state the node\u2019s callback onCleanup will be called to clear\n# all state and return the node to a functionally equivalent state as when\n# first created.\nuint8 TRANSITION_STATE_CLEANINGUP = 11\n\n# In this transition state the callback onShutdown will be executed to do any\n# cleanup necessary before destruction.\nuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\n# In this transition state the callback onActivate will be executed to do any\n# final preparations to start executing.\nuint8 TRANSITION_STATE_ACTIVATING = 13\n\n# In this transition state the callback onDeactivate will be executed to do any\n# cleanup to start executing, and reverse the onActivate changes.\nuint8 TRANSITION_STATE_DEACTIVATING = 14\n\n# This transition state is where any error may be cleaned up.\nuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\n# The state id value from the above definitions.\nuint8 id\n\n# A text label of the state.\nstring label", "lifecycle_msgs/msg/Transition": "# Default values for transitions as described in:\n# http://design.ros2.org/articles/node_lifecycle.html\n\n# Reserved [0-9], publicly available transitions.\n# When a node is in one of these primary states, these transitions can be\n# invoked.\n\n# This transition will instantiate the node, but will not run any code beyond\n# the constructor.\nuint8 TRANSITION_CREATE = 0\n\n# The node\u2019s onConfigure callback will be called to allow the node to load its\n# configuration and conduct any required setup.\nuint8 TRANSITION_CONFIGURE = 1\n\n# The node\u2019s callback onCleanup will be called in this transition to allow the\n# node to load its configuration and conduct any required setup.\nuint8 TRANSITION_CLEANUP = 2\n\n# The node's callback onActivate will be executed to do any final preparations\n# to start executing.\nuint8 TRANSITION_ACTIVATE = 3\n\n# The node's callback onDeactivate will be executed to do any cleanup to start\n# executing, and reverse the onActivate changes.\nuint8 TRANSITION_DEACTIVATE = 4\n\n# This signals shutdown during an unconfigured state, the node's callback\n# onShutdown will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\n# This signals shutdown during an inactive state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\n# This signals shutdown during an active state, the node's callback onShutdown\n# will be executed to do any cleanup necessary before destruction.\nuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\n# This transition will simply cause the deallocation of the node.\nuint8 TRANSITION_DESTROY = 8\n\n# Reserved [10-69], private transitions\n# These transitions are not publicly available and cannot be invoked by a user.\n# The following transitions are implicitly invoked based on the callback\n# feedback of the intermediate transition states.\nuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\nuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\nuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\nuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\nuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\nuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\nuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\nuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\nuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\nuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\nuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\nuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\nuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\nuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\nuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\nuint8 TRANSITION_ON_ERROR_SUCCESS = 60\nuint8 TRANSITION_ON_ERROR_FAILURE = 61\nuint8 TRANSITION_ON_ERROR_ERROR = 62\n\n# Reserved [90-99]. Transition callback success values.\n# These return values ought to be set as a return value for each callback.\n# Depending on which return value, the transition will be executed correctly or\n# fallback/error callbacks will be triggered.\n\n# The transition callback successfully performed its required functionality.\nuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\n# The transition callback failed to perform its required functionality.\nuint8 TRANSITION_CALLBACK_FAILURE = 98\n\n# The transition callback encountered an error that requires special cleanup, if\n# possible.\nuint8 TRANSITION_CALLBACK_ERROR = 99\n\n##\n## Fields\n##\n\n# The transition id from above definitions.\nuint8 id\n\n# A text label of the transition.\nstring label", "lifecycle_msgs/msg/TransitionDescription": "# The transition id and label of this description.\nTransition transition\n\tuint8 TRANSITION_CREATE = 0\n\tuint8 TRANSITION_CONFIGURE = 1\n\tuint8 TRANSITION_CLEANUP = 2\n\tuint8 TRANSITION_ACTIVATE = 3\n\tuint8 TRANSITION_DEACTIVATE = 4\n\tuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\tuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\tuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\tuint8 TRANSITION_DESTROY = 8\n\tuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\n\tuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\n\tuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\tuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\n\tuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\n\tuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\tuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\n\tuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\n\tuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\tuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\n\tuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\n\tuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\tuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\n\tuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\n\tuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\tuint8 TRANSITION_ON_ERROR_SUCCESS = 60\n\tuint8 TRANSITION_ON_ERROR_FAILURE = 61\n\tuint8 TRANSITION_ON_ERROR_ERROR = 62\n\tuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\tuint8 TRANSITION_CALLBACK_FAILURE = 98\n\tuint8 TRANSITION_CALLBACK_ERROR = 99\n\tuint8 id\n\tstring label\n\n# The current state from which this transition transitions.\nState start_state\n\tuint8 PRIMARY_STATE_UNKNOWN = 0\n\tuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\tuint8 PRIMARY_STATE_INACTIVE = 2\n\tuint8 PRIMARY_STATE_ACTIVE = 3\n\tuint8 PRIMARY_STATE_FINALIZED = 4\n\tuint8 TRANSITION_STATE_CONFIGURING = 10\n\tuint8 TRANSITION_STATE_CLEANINGUP = 11\n\tuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\tuint8 TRANSITION_STATE_ACTIVATING = 13\n\tuint8 TRANSITION_STATE_DEACTIVATING = 14\n\tuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\tuint8 id\n\tstring label\n\n# The desired target state of this transition.\nState goal_state\n\tuint8 PRIMARY_STATE_UNKNOWN = 0\n\tuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\tuint8 PRIMARY_STATE_INACTIVE = 2\n\tuint8 PRIMARY_STATE_ACTIVE = 3\n\tuint8 PRIMARY_STATE_FINALIZED = 4\n\tuint8 TRANSITION_STATE_CONFIGURING = 10\n\tuint8 TRANSITION_STATE_CLEANINGUP = 11\n\tuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\tuint8 TRANSITION_STATE_ACTIVATING = 13\n\tuint8 TRANSITION_STATE_DEACTIVATING = 14\n\tuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\tuint8 id\n\tstring label", "lifecycle_msgs/msg/TransitionEvent": "# The time point at which this event occurred.\nuint64 timestamp\n\n# The id and label of this transition event.\nTransition transition\n\tuint8 TRANSITION_CREATE = 0\n\tuint8 TRANSITION_CONFIGURE = 1\n\tuint8 TRANSITION_CLEANUP = 2\n\tuint8 TRANSITION_ACTIVATE = 3\n\tuint8 TRANSITION_DEACTIVATE = 4\n\tuint8 TRANSITION_UNCONFIGURED_SHUTDOWN  = 5\n\tuint8 TRANSITION_INACTIVE_SHUTDOWN = 6\n\tuint8 TRANSITION_ACTIVE_SHUTDOWN = 7\n\tuint8 TRANSITION_DESTROY = 8\n\tuint8 TRANSITION_ON_CONFIGURE_SUCCESS = 10\n\tuint8 TRANSITION_ON_CONFIGURE_FAILURE = 11\n\tuint8 TRANSITION_ON_CONFIGURE_ERROR = 12\n\tuint8 TRANSITION_ON_CLEANUP_SUCCESS = 20\n\tuint8 TRANSITION_ON_CLEANUP_FAILURE = 21\n\tuint8 TRANSITION_ON_CLEANUP_ERROR = 22\n\tuint8 TRANSITION_ON_ACTIVATE_SUCCESS = 30\n\tuint8 TRANSITION_ON_ACTIVATE_FAILURE = 31\n\tuint8 TRANSITION_ON_ACTIVATE_ERROR = 32\n\tuint8 TRANSITION_ON_DEACTIVATE_SUCCESS = 40\n\tuint8 TRANSITION_ON_DEACTIVATE_FAILURE = 41\n\tuint8 TRANSITION_ON_DEACTIVATE_ERROR = 42\n\tuint8 TRANSITION_ON_SHUTDOWN_SUCCESS = 50\n\tuint8 TRANSITION_ON_SHUTDOWN_FAILURE = 51\n\tuint8 TRANSITION_ON_SHUTDOWN_ERROR = 52\n\tuint8 TRANSITION_ON_ERROR_SUCCESS = 60\n\tuint8 TRANSITION_ON_ERROR_FAILURE = 61\n\tuint8 TRANSITION_ON_ERROR_ERROR = 62\n\tuint8 TRANSITION_CALLBACK_SUCCESS = 97\n\tuint8 TRANSITION_CALLBACK_FAILURE = 98\n\tuint8 TRANSITION_CALLBACK_ERROR = 99\n\tuint8 id\n\tstring label\n\n# The starting state from which this event transitioned.\nState start_state\n\tuint8 PRIMARY_STATE_UNKNOWN = 0\n\tuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\tuint8 PRIMARY_STATE_INACTIVE = 2\n\tuint8 PRIMARY_STATE_ACTIVE = 3\n\tuint8 PRIMARY_STATE_FINALIZED = 4\n\tuint8 TRANSITION_STATE_CONFIGURING = 10\n\tuint8 TRANSITION_STATE_CLEANINGUP = 11\n\tuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\tuint8 TRANSITION_STATE_ACTIVATING = 13\n\tuint8 TRANSITION_STATE_DEACTIVATING = 14\n\tuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\tuint8 id\n\tstring label\n\n# The end state of this transition event.\nState goal_state\n\tuint8 PRIMARY_STATE_UNKNOWN = 0\n\tuint8 PRIMARY_STATE_UNCONFIGURED = 1\n\tuint8 PRIMARY_STATE_INACTIVE = 2\n\tuint8 PRIMARY_STATE_ACTIVE = 3\n\tuint8 PRIMARY_STATE_FINALIZED = 4\n\tuint8 TRANSITION_STATE_CONFIGURING = 10\n\tuint8 TRANSITION_STATE_CLEANINGUP = 11\n\tuint8 TRANSITION_STATE_SHUTTINGDOWN = 12\n\tuint8 TRANSITION_STATE_ACTIVATING = 13\n\tuint8 TRANSITION_STATE_DEACTIVATING = 14\n\tuint8 TRANSITION_STATE_ERRORPROCESSING = 15\n\tuint8 id\n\tstring label", "map_msgs/msg/OccupancyGridUpdate": "std_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\nint32 x\nint32 y\nuint32 width\nuint32 height\nint8[] data", "map_msgs/msg/PointCloud2Update": "uint32 ADD=0\nuint32 DELETE=1\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\nuint32 type          # type of update, one of ADD or DELETE\nsensor_msgs/PointCloud2 points\n\t#\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tuint32 height\n\tuint32 width\n\tPointField[] fields\n\t\tuint8 INT8    = 1\n\t\tuint8 UINT8   = 2\n\t\tuint8 INT16   = 3\n\t\tuint8 UINT16  = 4\n\t\tuint8 INT32   = 5\n\t\tuint8 UINT32  = 6\n\t\tuint8 FLOAT32 = 7\n\t\tuint8 FLOAT64 = 8\n\t\tstring name\n\t\tuint32 offset\n\t\tuint8  datatype\n\t\tuint32 count\n\tbool    is_bigendian\n\tuint32  point_step\n\tuint32  row_step\n\tuint8[] data\n\tbool is_dense", "map_msgs/msg/ProjectedMap": "nav_msgs/OccupancyGrid map\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tMapMetaData info\n\t\tbuiltin_interfaces/Time map_load_time\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tfloat32 resolution\n\t\tuint32 width\n\t\tuint32 height\n\t\tgeometry_msgs/Pose origin\n\t\t\tPoint position\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion orientation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\tint8[] data\nfloat64 min_z\nfloat64 max_z", "map_msgs/msg/ProjectedMapInfo": "string frame_id\nfloat64 x\nfloat64 y\nfloat64 width\nfloat64 height\nfloat64 min_z\nfloat64 max_z", "nav_msgs/msg/GridCells": "# An array of cells in a 2D grid\n\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\n# Width of each cell\nfloat32 cell_width\n\n# Height of each cell\nfloat32 cell_height\n\n# Each cell is represented by the Point at the center of the cell\ngeometry_msgs/Point[] cells\n\tfloat64 x\n\tfloat64 y\n\tfloat64 z", "nav_msgs/msg/MapMetaData": "# This hold basic information about the characteristics of the OccupancyGrid\n\n# The time at which the map was loaded\nbuiltin_interfaces/Time map_load_time\n\tint32 sec\n\tuint32 nanosec\n\n# The map resolution [m/cell]\nfloat32 resolution\n\n# Map width [cells]\nuint32 width\n\n# Map height [cells]\nuint32 height\n\n# The origin of the map [m, m, rad].  This is the real-world pose of the\n# bottom left corner of cell (0,0) in the map.\ngeometry_msgs/Pose origin\n\tPoint position\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tQuaternion orientation\n\t\tfloat64 x 0\n\t\tfloat64 y 0\n\t\tfloat64 z 0\n\t\tfloat64 w 1", "nav_msgs/msg/OccupancyGrid": "# This represents a 2-D grid map\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\n# MetaData for the map\nMapMetaData info\n\tbuiltin_interfaces/Time map_load_time\n\t\tint32 sec\n\t\tuint32 nanosec\n\tfloat32 resolution\n\tuint32 width\n\tuint32 height\n\tgeometry_msgs/Pose origin\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\n# The map data, in row-major order, starting with (0,0).\n# Cell (1, 0) will be listed second, representing the next cell in the x direction.\n# Cell (0, 1) will be at the index equal to info.width, followed by (1, 1).\n# The values inside are application dependent, but frequently,\n# 0 represents unoccupied, 1 represents definitely occupied, and\n# -1 represents unknown.\nint8[] data", "nav_msgs/msg/Odometry": "# This represents an estimate of a position and velocity in free space.\n# The pose in this message should be specified in the coordinate frame given by header.frame_id\n# The twist in this message should be specified in the coordinate frame given by the child_frame_id\n\n# Includes the frame id of the pose parent.\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\n# Frame id the pose points to. The twist is in this coordinate frame.\nstring child_frame_id\n\n# Estimated pose that is typically relative to a fixed world frame.\ngeometry_msgs/PoseWithCovariance pose\n\tPose pose\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tfloat64[36] covariance\n\n# Estimated linear and angular velocity relative to child_frame_id.\ngeometry_msgs/TwistWithCovariance twist\n\tTwist twist\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tfloat64[36] covariance", "nav_msgs/msg/Path": "# An array of poses that represents a Path for a robot to follow.\n\n# Indicates the frame_id of the path.\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\n# Array of poses to follow.\ngeometry_msgs/PoseStamped[] poses\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tPose pose\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1", "pcl_msgs/msg/ModelCoefficients": "std_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\nfloat32[] values\n", "pcl_msgs/msg/PointIndices": "std_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\nint32[] indices\n", "pcl_msgs/msg/PolygonMesh": "# Separate header for the polygonal surface\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n# Vertices of the mesh as a point cloud\nsensor_msgs/PointCloud2 cloud\n\t#\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tuint32 height\n\tuint32 width\n\tPointField[] fields\n\t\tuint8 INT8    = 1\n\t\tuint8 UINT8   = 2\n\t\tuint8 INT16   = 3\n\t\tuint8 UINT16  = 4\n\t\tuint8 INT32   = 5\n\t\tuint8 UINT32  = 6\n\t\tuint8 FLOAT32 = 7\n\t\tuint8 FLOAT64 = 8\n\t\tstring name\n\t\tuint32 offset\n\t\tuint8  datatype\n\t\tuint32 count\n\tbool    is_bigendian\n\tuint32  point_step\n\tuint32  row_step\n\tuint8[] data\n\tbool is_dense\n# List of polygons\nVertices[] polygons\n\tuint32[] vertices", "pcl_msgs/msg/Vertices": "# List of point indices\nuint32[] vertices", "pendulum_msgs/msg/JointCommand": "float64 position", "pendulum_msgs/msg/JointState": "float64 position\nfloat64 velocity\nfloat64 effort", "pendulum_msgs/msg/RttestResults": "builtin_interfaces/Time stamp\n\tint32 sec\n\tuint32 nanosec\n\nJointCommand command\n\tfloat64 position\nJointState state\n\tfloat64 position\n\tfloat64 velocity\n\tfloat64 effort\n\nuint64 cur_latency\nfloat64 mean_latency\nuint64 min_latency\nuint64 max_latency\nuint64 minor_pagefaults\nuint64 major_pagefaults", "rcl_interfaces/msg/FloatingPointRange": "# Represents bounds and a step value for a floating point typed parameter.\n\n# Start value for valid values, inclusive.\nfloat64 from_value\n\n# End value for valid values, inclusive.\nfloat64 to_value\n\n# Size of valid steps between the from and to bound.\n#\n# Step is considered to be a magnitude, therefore negative values are treated\n# the same as positive values, and a step value of zero implies a continuous\n# range of values.\n#\n# Ideally, the step would be less than or equal to the distance between the\n# bounds, as well as an even multiple of the distance between the bounds, but\n# neither are required.\n#\n# If the absolute value of the step is larger than or equal to the distance\n# between the two bounds, then the bounds will be the only valid values. e.g. if\n# the range is defined as {from_value: 1.0, to_value: 2.0, step: 5.0} then the\n# valid values will be 1.0 and 2.0.\n#\n# If the step is less than the distance between the bounds, but the distance is\n# not a multiple of the step, then the \"to\" bound will always be a valid value,\n# e.g. if the range is defined as {from_value: 2.0, to_value: 5.0, step: 2.0}\n# then the valid values will be 2.0, 4.0, and 5.0.\nfloat64 step", "rcl_interfaces/msg/IntegerRange": "# Represents bounds and a step value for an integer typed parameter.\n\n# Start value for valid values, inclusive.\nint64 from_value\n\n# End value for valid values, inclusive.\nint64 to_value\n\n# Size of valid steps between the from and to bound.\n#\n# A step value of zero implies a continuous range of values. Ideally, the step\n# would be less than or equal to the distance between the bounds, as well as an\n# even multiple of the distance between the bounds, but neither are required.\n#\n# If the absolute value of the step is larger than or equal to the distance\n# between the two bounds, then the bounds will be the only valid values. e.g. if\n# the range is defined as {from_value: 1, to_value: 2, step: 5} then the valid\n# values will be 1 and 2.\n#\n# If the step is less than the distance between the bounds, but the distance is\n# not a multiple of the step, then the \"to\" bound will always be a valid value,\n# e.g. if the range is defined as {from_value: 2, to_value: 5, step: 2} then\n# the valid values will be 2, 4, and 5.\nuint64 step", "rcl_interfaces/msg/ListParametersResult": "# The resulting parameters under the given prefixes.\nstring[] names\n\n# The resulting prefixes under the given prefixes.\n# TODO(wjwwood): link to prefix definition and rules.\nstring[] prefixes", "rcl_interfaces/msg/Log": "##\n## Severity level constants\n##\n## These logging levels follow the Python Standard\n## https://docs.python.org/3/library/logging.html#logging-levels\n## And are implemented in rcutils as well\n## https://github.com/ros2/rcutils/blob/35f29850064e0c33a4063cbc947ebbfeada11dba/include/rcutils/logging.h#L164-L172\n## This leaves space for other standard logging levels to be inserted in the middle in the future,\n## as well as custom user defined levels.\n## Since there are several other logging enumeration standard for different implementations,\n## other logging implementations may need to provide level mappings to match their internal implementations.\n##\n\n# Debug is for pedantic information, which is useful when debugging issues.\nbyte DEBUG=10\n\n# Info is the standard informational level and is used to report expected\n# information.\nbyte INFO=20\n\n# Warning is for information that may potentially cause issues or possibly unexpected\n# behavior.\nbyte WARN=30\n\n# Error is for information that this node cannot resolve.\nbyte ERROR=40\n\n# Information about a impending node shutdown.\nbyte FATAL=50\n\n##\n## Fields\n##\n\n# Timestamp when this message was generated by the node.\nbuiltin_interfaces/Time stamp\n\tint32 sec\n\tuint32 nanosec\n\n# Corresponding log level, see above definitions.\nuint8 level\n\n# The name representing the logger this message came from.\nstring name\n\n# The full log message.\nstring msg\n\n# The file the message came from.\nstring file\n\n# The function the message came from.\nstring function\n\n# The line in the file the message came from.\nuint32 line", "rcl_interfaces/msg/Parameter": "# This is the message to communicate a parameter. It is an open struct with an enum in\n# the descriptor to select which value is active.\n\n# The full name of the parameter.\nstring name\n\n# The parameter's value which can be one of several types, see\n# `ParameterValue.msg` and `ParameterType.msg`.\nParameterValue value\n\tuint8 type\n\tbool bool_value\n\tint64 integer_value\n\tfloat64 double_value\n\tstring string_value\n\tbyte[] byte_array_value\n\tbool[] bool_array_value\n\tint64[] integer_array_value\n\tfloat64[] double_array_value\n\tstring[] string_array_value", "rcl_interfaces/msg/ParameterDescriptor": "# This is the message to communicate a parameter's descriptor.\n\n# The name of the parameter.\nstring name\n\n# Enum values are defined in the `ParameterType.msg` message.\nuint8 type\n\n# Description of the parameter, visible from introspection tools.\nstring description\n\n# Parameter constraints\n\n# Plain English description of additional constraints which cannot be expressed\n# with the available constraints, e.g. \"only prime numbers\".\n#\n# By convention, this should only be used to clarify constraints which cannot\n# be completely expressed with the parameter constraints below.\nstring additional_constraints\n\n# If 'true' then the value cannot change after it has been initialized.\nbool read_only false\n\n# If true, the parameter is allowed to change type.\nbool dynamic_typing false\n\n# If any of the following sequences are not empty, then the constraint inside of\n# them apply to this parameter.\n#\n# FloatingPointRange and IntegerRange are mutually exclusive.\n\n# FloatingPointRange consists of a from_value, a to_value, and a step.\nFloatingPointRange[<=1] floating_point_range\n\tfloat64 from_value\n\tfloat64 to_value\n\t#\n\t#\n\t#\n\t#\n\tfloat64 step\n\n# IntegerRange consists of a from_value, a to_value, and a step.\nIntegerRange[<=1] integer_range\n\tint64 from_value\n\tint64 to_value\n\t#\n\t#\n\t#\n\tuint64 step", "rcl_interfaces/msg/ParameterEvent": "# This message contains a parameter event.\n# Because the parameter event was an atomic update, a specific parameter name\n# can only be in one of the three sets.\n\n# The time stamp when this parameter event occurred.\nbuiltin_interfaces/Time stamp\n\tint32 sec\n\tuint32 nanosec\n\n# Fully qualified ROS path to node.\nstring node\n\n# New parameters that have been set for this node.\nParameter[] new_parameters\n\tstring name\n\tParameterValue value\n\t\tuint8 type\n\t\tbool bool_value\n\t\tint64 integer_value\n\t\tfloat64 double_value\n\t\tstring string_value\n\t\tbyte[] byte_array_value\n\t\tbool[] bool_array_value\n\t\tint64[] integer_array_value\n\t\tfloat64[] double_array_value\n\t\tstring[] string_array_value\n\n# Parameters that have been changed during this event.\nParameter[] changed_parameters\n\tstring name\n\tParameterValue value\n\t\tuint8 type\n\t\tbool bool_value\n\t\tint64 integer_value\n\t\tfloat64 double_value\n\t\tstring string_value\n\t\tbyte[] byte_array_value\n\t\tbool[] bool_array_value\n\t\tint64[] integer_array_value\n\t\tfloat64[] double_array_value\n\t\tstring[] string_array_value\n\n# Parameters that have been deleted during this event.\nParameter[] deleted_parameters\n\tstring name\n\tParameterValue value\n\t\tuint8 type\n\t\tbool bool_value\n\t\tint64 integer_value\n\t\tfloat64 double_value\n\t\tstring string_value\n\t\tbyte[] byte_array_value\n\t\tbool[] bool_array_value\n\t\tint64[] integer_array_value\n\t\tfloat64[] double_array_value\n\t\tstring[] string_array_value", "rcl_interfaces/msg/ParameterEventDescriptors": "# This message contains descriptors of a parameter event.\n# It was an atomic update.\n# A specific parameter name can only be in one of the three sets.\n\nParameterDescriptor[] new_parameters\n\tstring name\n\tuint8 type\n\tstring description\n\t#\n\tstring additional_constraints\n\tbool read_only false\n\tbool dynamic_typing false\n\t#\n\tFloatingPointRange[<=1] floating_point_range\n\t\tfloat64 from_value\n\t\tfloat64 to_value\n\t\t#\n\t\t#\n\t\t#\n\t\t#\n\t\tfloat64 step\n\tIntegerRange[<=1] integer_range\n\t\tint64 from_value\n\t\tint64 to_value\n\t\t#\n\t\t#\n\t\t#\n\t\tuint64 step\nParameterDescriptor[] changed_parameters\n\tstring name\n\tuint8 type\n\tstring description\n\t#\n\tstring additional_constraints\n\tbool read_only false\n\tbool dynamic_typing false\n\t#\n\tFloatingPointRange[<=1] floating_point_range\n\t\tfloat64 from_value\n\t\tfloat64 to_value\n\t\t#\n\t\t#\n\t\t#\n\t\t#\n\t\tfloat64 step\n\tIntegerRange[<=1] integer_range\n\t\tint64 from_value\n\t\tint64 to_value\n\t\t#\n\t\t#\n\t\t#\n\t\tuint64 step\nParameterDescriptor[] deleted_parameters\n\tstring name\n\tuint8 type\n\tstring description\n\t#\n\tstring additional_constraints\n\tbool read_only false\n\tbool dynamic_typing false\n\t#\n\tFloatingPointRange[<=1] floating_point_range\n\t\tfloat64 from_value\n\t\tfloat64 to_value\n\t\t#\n\t\t#\n\t\t#\n\t\t#\n\t\tfloat64 step\n\tIntegerRange[<=1] integer_range\n\t\tint64 from_value\n\t\tint64 to_value\n\t\t#\n\t\t#\n\t\t#\n\t\tuint64 step", "rcl_interfaces/msg/ParameterType": "# These types correspond to the value that is set in the ParameterValue message.\n\n# Default value, which implies this is not a valid parameter.\nuint8 PARAMETER_NOT_SET=0\n\nuint8 PARAMETER_BOOL=1\nuint8 PARAMETER_INTEGER=2\nuint8 PARAMETER_DOUBLE=3\nuint8 PARAMETER_STRING=4\nuint8 PARAMETER_BYTE_ARRAY=5\nuint8 PARAMETER_BOOL_ARRAY=6\nuint8 PARAMETER_INTEGER_ARRAY=7\nuint8 PARAMETER_DOUBLE_ARRAY=8\nuint8 PARAMETER_STRING_ARRAY=9", "rcl_interfaces/msg/ParameterValue": "# Used to determine which of the next *_value fields are set.\n# ParameterType.PARAMETER_NOT_SET indicates that the parameter was not set\n# (if gotten) or is uninitialized.\n# Values are enumerated in `ParameterType.msg`.\n\n# The type of this parameter, which corresponds to the appropriate field below.\nuint8 type\n\n# \"Variant\" style storage of the parameter value. Only the value corresponding\n# the type field will have valid information.\n\n# Boolean value, can be either true or false.\nbool bool_value\n\n# Integer value ranging from -9,223,372,036,854,775,808 to\n# 9,223,372,036,854,775,807.\nint64 integer_value\n\n# A double precision floating point value following IEEE 754.\nfloat64 double_value\n\n# A textual value with no practical length limit.\nstring string_value\n\n# An array of bytes, used for non-textual information.\nbyte[] byte_array_value\n\n# An array of boolean values.\nbool[] bool_array_value\n\n# An array of 64-bit integer values.\nint64[] integer_array_value\n\n# An array of 64-bit floating point values.\nfloat64[] double_array_value\n\n# An array of string values.\nstring[] string_array_value", "rcl_interfaces/msg/SetParametersResult": "# A true value of the same index indicates that the parameter was set\n# successfully. A false value indicates the change was rejected.\nbool successful\n\n# Reason why the setting was either successful or a failure. This should only be\n# used for logging and user interfaces.\nstring reason", "rmw_dds_common/msg/Gid": "char[24] data", "rmw_dds_common/msg/NodeEntitiesInfo": "string<=256 node_namespace\nstring<=256 node_name\nGid[] reader_gid_seq\n\tchar[24] data\nGid[] writer_gid_seq\n\tchar[24] data", "rmw_dds_common/msg/ParticipantEntitiesInfo": "Gid gid\n\tchar[24] data\nNodeEntitiesInfo[] node_entities_info_seq\n\tstring<=256 node_namespace\n\tstring<=256 node_name\n\tGid[] reader_gid_seq\n\t\tchar[24] data\n\tGid[] writer_gid_seq\n\t\tchar[24] data", "rosgraph_msgs/msg/Clock": "# This message communicates the current time.\n#\n# For more information, see https://design.ros2.org/articles/clock_and_time.html.\nbuiltin_interfaces/Time clock\n\tint32 sec\n\tuint32 nanosec", "sensor_msgs/msg/BatteryState": "\n# Constants are chosen to match the enums in the linux kernel\n# defined in include/linux/power_supply.h as of version 3.7\n# The one difference is for style reasons the constants are\n# all uppercase not mixed case.\n\n# Power supply status constants\nuint8 POWER_SUPPLY_STATUS_UNKNOWN = 0\nuint8 POWER_SUPPLY_STATUS_CHARGING = 1\nuint8 POWER_SUPPLY_STATUS_DISCHARGING = 2\nuint8 POWER_SUPPLY_STATUS_NOT_CHARGING = 3\nuint8 POWER_SUPPLY_STATUS_FULL = 4\n\n# Power supply health constants\nuint8 POWER_SUPPLY_HEALTH_UNKNOWN = 0\nuint8 POWER_SUPPLY_HEALTH_GOOD = 1\nuint8 POWER_SUPPLY_HEALTH_OVERHEAT = 2\nuint8 POWER_SUPPLY_HEALTH_DEAD = 3\nuint8 POWER_SUPPLY_HEALTH_OVERVOLTAGE = 4\nuint8 POWER_SUPPLY_HEALTH_UNSPEC_FAILURE = 5\nuint8 POWER_SUPPLY_HEALTH_COLD = 6\nuint8 POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE = 7\nuint8 POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE = 8\n\n# Power supply technology (chemistry) constants\nuint8 POWER_SUPPLY_TECHNOLOGY_UNKNOWN = 0\nuint8 POWER_SUPPLY_TECHNOLOGY_NIMH = 1\nuint8 POWER_SUPPLY_TECHNOLOGY_LION = 2\nuint8 POWER_SUPPLY_TECHNOLOGY_LIPO = 3\nuint8 POWER_SUPPLY_TECHNOLOGY_LIFE = 4\nuint8 POWER_SUPPLY_TECHNOLOGY_NICD = 5\nuint8 POWER_SUPPLY_TECHNOLOGY_LIMN = 6\n\nstd_msgs/Header  header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\nfloat32 voltage          # Voltage in Volts (Mandatory)\nfloat32 temperature      # Temperature in Degrees Celsius (If unmeasured NaN)\nfloat32 current          # Negative when discharging (A)  (If unmeasured NaN)\nfloat32 charge           # Current charge in Ah  (If unmeasured NaN)\nfloat32 capacity         # Capacity in Ah (last full capacity)  (If unmeasured NaN)\nfloat32 design_capacity  # Capacity in Ah (design capacity)  (If unmeasured NaN)\nfloat32 percentage       # Charge percentage on 0 to 1 range  (If unmeasured NaN)\nuint8   power_supply_status     # The charging status as reported. Values defined above\nuint8   power_supply_health     # The battery health metric. Values defined above\nuint8   power_supply_technology # The battery chemistry. Values defined above\nbool    present          # True if the battery is present\n\nfloat32[] cell_voltage   # An array of individual cell voltages for each cell in the pack\n                         # If individual voltages unknown but number of cells known set each to NaN\nfloat32[] cell_temperature # An array of individual cell temperatures for each cell in the pack\n                           # If individual temperatures unknown but number of cells known set each to NaN\nstring location          # The location into which the battery is inserted. (slot number or plug)\nstring serial_number     # The best approximation of the battery serial number", "sensor_msgs/msg/CameraInfo": "# This message defines meta information for a camera. It should be in a\n# camera namespace on topic \"camera_info\" and accompanied by up to five\n# image topics named:\n#\n#   image_raw - raw data from the camera driver, possibly Bayer encoded\n#   image            - monochrome, distorted\n#   image_color      - color, distorted\n#   image_rect       - monochrome, rectified\n#   image_rect_color - color, rectified\n#\n# The image_pipeline contains packages (image_proc, stereo_image_proc)\n# for producing the four processed image topics from image_raw and\n# camera_info. The meaning of the camera parameters are described in\n# detail at http://www.ros.org/wiki/image_pipeline/CameraInfo.\n#\n# The image_geometry package provides a user-friendly interface to\n# common operations using this meta information. If you want to, e.g.,\n# project a 3d point into image coordinates, we strongly recommend\n# using image_geometry.\n#\n# If the camera is uncalibrated, the matrices D, K, R, P should be left\n# zeroed out. In particular, clients may assume that K[0] == 0.0\n# indicates an uncalibrated camera.\n\n#######################################################################\n#                     Image acquisition info                          #\n#######################################################################\n\n# Time of image acquisition, camera coordinate frame ID\nstd_msgs/Header header # Header timestamp should be acquisition time of image\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n                             # Header frame_id should be optical frame of camera\n                             # origin of frame should be optical center of camera\n                             # +x should point to the right in the image\n                             # +y should point down in the image\n                             # +z should point into the plane of the image\n\n\n#######################################################################\n#                      Calibration Parameters                         #\n#######################################################################\n# These are fixed during camera calibration. Their values will be the #\n# same in all messages until the camera is recalibrated. Note that    #\n# self-calibrating systems may \"recalibrate\" frequently.              #\n#                                                                     #\n# The internal parameters can be used to warp a raw (distorted) image #\n# to:                                                                 #\n#   1. An undistorted image (requires D and K)                        #\n#   2. A rectified image (requires D, K, R)                           #\n# The projection matrix P projects 3D points into the rectified image.#\n#######################################################################\n\n# The image dimensions with which the camera was calibrated.\n# Normally this will be the full camera resolution in pixels.\nuint32 height\nuint32 width\n\n# The distortion model used. Supported models are listed in\n# sensor_msgs/distortion_models.hpp. For most cameras, \"plumb_bob\" - a\n# simple model of radial and tangential distortion - is sufficent.\nstring distortion_model\n\n# The distortion parameters, size depending on the distortion model.\n# For \"plumb_bob\", the 5 parameters are: (k1, k2, t1, t2, k3).\nfloat64[] d\n\n# Intrinsic camera matrix for the raw (distorted) images.\n#     [fx  0 cx]\n# K = [ 0 fy cy]\n#     [ 0  0  1]\n# Projects 3D points in the camera coordinate frame to 2D pixel\n# coordinates using the focal lengths (fx, fy) and principal point\n# (cx, cy).\nfloat64[9]  k # 3x3 row-major matrix\n\n# Rectification matrix (stereo cameras only)\n# A rotation matrix aligning the camera coordinate system to the ideal\n# stereo image plane so that epipolar lines in both stereo images are\n# parallel.\nfloat64[9]  r # 3x3 row-major matrix\n\n# Projection/camera matrix\n#     [fx'  0  cx' Tx]\n# P = [ 0  fy' cy' Ty]\n#     [ 0   0   1   0]\n# By convention, this matrix specifies the intrinsic (camera) matrix\n#  of the processed (rectified) image. That is, the left 3x3 portion\n#  is the normal camera intrinsic matrix for the rectified image.\n# It projects 3D points in the camera coordinate frame to 2D pixel\n#  coordinates using the focal lengths (fx', fy') and principal point\n#  (cx', cy') - these may differ from the values in K.\n# For monocular cameras, Tx = Ty = 0. Normally, monocular cameras will\n#  also have R = the identity and P[1:3,1:3] = K.\n# For a stereo pair, the fourth column [Tx Ty 0]' is related to the\n#  position of the optical center of the second camera in the first\n#  camera's frame. We assume Tz = 0 so both cameras are in the same\n#  stereo image plane. The first camera always has Tx = Ty = 0. For\n#  the right (second) camera of a horizontal stereo pair, Ty = 0 and\n#  Tx = -fx' * B, where B is the baseline between the cameras.\n# Given a 3D point [X Y Z]', the projection (x, y) of the point onto\n#  the rectified image is given by:\n#  [u v w]' = P * [X Y Z 1]'\n#         x = u / w\n#         y = v / w\n#  This holds for both images of a stereo pair.\nfloat64[12] p # 3x4 row-major matrix\n\n\n#######################################################################\n#                      Operational Parameters                         #\n#######################################################################\n# These define the image region actually captured by the camera       #\n# driver. Although they affect the geometry of the output image, they #\n# may be changed freely without recalibrating the camera.             #\n#######################################################################\n\n# Binning refers here to any camera setting which combines rectangular\n#  neighborhoods of pixels into larger \"super-pixels.\" It reduces the\n#  resolution of the output image to\n#  (width / binning_x) x (height / binning_y).\n# The default values binning_x = binning_y = 0 is considered the same\n#  as binning_x = binning_y = 1 (no subsampling).\nuint32 binning_x\nuint32 binning_y\n\n# Region of interest (subwindow of full camera resolution), given in\n#  full resolution (unbinned) image coordinates. A particular ROI\n#  always denotes the same window of pixels on the camera sensor,\n#  regardless of binning settings.\n# The default setting of roi (all values 0) is considered the same as\n#  full resolution (roi.width = width, roi.height = height).\nRegionOfInterest roi\n\t#\n\tuint32 x_offset\n\t                 # (0 if the ROI includes the left edge of the image)\n\tuint32 y_offset\n\t                 # (0 if the ROI includes the top edge of the image)\n\tuint32 height\n\tuint32 width\n\tbool do_rectify", "sensor_msgs/msg/ChannelFloat32": "# This message is used by the PointCloud message to hold optional data\n# associated with each point in the cloud. The length of the values\n# array should be the same as the length of the points array in the\n# PointCloud, and each value should be associated with the corresponding\n# point.\n#\n# Channel names in existing practice include:\n#   \"u\", \"v\" - row and column (respectively) in the left stereo image.\n#              This is opposite to usual conventions but remains for\n#              historical reasons. The newer PointCloud2 message has no\n#              such problem.\n#   \"rgb\" - For point clouds produced by color stereo cameras. uint8\n#           (R,G,B) values packed into the least significant 24 bits,\n#           in order.\n#   \"intensity\" - laser or pixel intensity.\n#   \"distance\"\n\n# The channel name should give semantics of the channel (e.g.\n# \"intensity\" instead of \"value\").\nstring name\n\n# The values array should be 1-1 with the elements of the associated\n# PointCloud.\nfloat32[] values", "sensor_msgs/msg/CompressedImage": "# This message contains a compressed image.\n\nstd_msgs/Header header # Header timestamp should be acquisition time of image\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n                             # Header frame_id should be optical frame of camera\n                             # origin of frame should be optical center of cameara\n                             # +x should point to the right in the image\n                             # +y should point down in the image\n                             # +z should point into to plane of the image\n\nstring format                # Specifies the format of the data\n                             #   Acceptable values:\n                             #     jpeg, png\n\nuint8[] data                 # Compressed image buffer", "sensor_msgs/msg/FluidPressure": "# Single pressure reading.  This message is appropriate for measuring the\n# pressure inside of a fluid (air, water, etc).  This also includes\n# atmospheric or barometric pressure.\n#\n# This message is not appropriate for force/pressure contact sensors.\n\nstd_msgs/Header header # timestamp of the measurement\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n                             # frame_id is the location of the pressure sensor\n\nfloat64 fluid_pressure       # Absolute pressure reading in Pascals.\n\nfloat64 variance             # 0 is interpreted as variance unknown", "sensor_msgs/msg/Illuminance": "# Single photometric illuminance measurement.  Light should be assumed to be\n# measured along the sensor's x-axis (the area of detection is the y-z plane).\n# The illuminance should have a 0 or positive value and be received with\n# the sensor's +X axis pointing toward the light source.\n#\n# Photometric illuminance is the measure of the human eye's sensitivity of the\n# intensity of light encountering or passing through a surface.\n#\n# All other Photometric and Radiometric measurements should not use this message.\n# This message cannot represent:\n#  - Luminous intensity (candela/light source output)\n#  - Luminance (nits/light output per area)\n#  - Irradiance (watt/area), etc.\n\nstd_msgs/Header header # timestamp is the time the illuminance was measured\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n                             # frame_id is the location and direction of the reading\n\nfloat64 illuminance          # Measurement of the Photometric Illuminance in Lux.\n\nfloat64 variance             # 0 is interpreted as variance unknown", "sensor_msgs/msg/Image": "# This message contains an uncompressed image\n# (0, 0) is at top-left corner of image\n\nstd_msgs/Header header # Header timestamp should be acquisition time of image\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n                             # Header frame_id should be optical frame of camera\n                             # origin of frame should be optical center of cameara\n                             # +x should point to the right in the image\n                             # +y should point down in the image\n                             # +z should point into to plane of the image\n                             # If the frame_id here and the frame_id of the CameraInfo\n                             # message associated with the image conflict\n                             # the behavior is undefined\n\nuint32 height                # image height, that is, number of rows\nuint32 width                 # image width, that is, number of columns\n\n# The legal values for encoding are in file src/image_encodings.cpp\n# If you want to standardize a new string format, join\n# ros-users@lists.ros.org and send an email proposing a new encoding.\n\nstring encoding       # Encoding of pixels -- channel meaning, ordering, size\n                      # taken from the list of strings in include/sensor_msgs/image_encodings.hpp\n\nuint8 is_bigendian    # is this data bigendian?\nuint32 step           # Full row length in bytes\nuint8[] data          # actual matrix data, size is (step * rows)", "sensor_msgs/msg/Imu": "# This is a message to hold data from an IMU (Inertial Measurement Unit)\n#\n# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec\n#\n# If the covariance of the measurement is known, it should be filled in (if all you know is the\n# variance of each measurement, e.g. from the datasheet, just put those along the diagonal)\n# A covariance matrix of all zeros will be interpreted as \"covariance unknown\", and to use the\n# data a covariance will have to be assumed or gotten from some other source\n#\n# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an\n# orientation estimate), please set element 0 of the associated covariance matrix to -1\n# If you are interpreting this message, please check for a value of -1 in the first element of each\n# covariance matrix, and disregard the associated estimate.\n\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\ngeometry_msgs/Quaternion orientation\n\tfloat64 x 0\n\tfloat64 y 0\n\tfloat64 z 0\n\tfloat64 w 1\nfloat64[9] orientation_covariance # Row major about x, y, z axes\n\ngeometry_msgs/Vector3 angular_velocity\n\tfloat64 x\n\tfloat64 y\n\tfloat64 z\nfloat64[9] angular_velocity_covariance # Row major about x, y, z axes\n\ngeometry_msgs/Vector3 linear_acceleration\n\tfloat64 x\n\tfloat64 y\n\tfloat64 z\nfloat64[9] linear_acceleration_covariance # Row major x, y z", "sensor_msgs/msg/JointState": "# This is a message that holds data to describe the state of a set of torque controlled joints.\n#\n# The state of each joint (revolute or prismatic) is defined by:\n#  * the position of the joint (rad or m),\n#  * the velocity of the joint (rad/s or m/s) and\n#  * the effort that is applied in the joint (Nm or N).\n#\n# Each joint is uniquely identified by its name\n# The header specifies the time at which the joint states were recorded. All the joint states\n# in one message have to be recorded at the same time.\n#\n# This message consists of a multiple arrays, one for each part of the joint state.\n# The goal is to make each of the fields optional. When e.g. your joints have no\n# effort associated with them, you can leave the effort array empty.\n#\n# All arrays in this message should have the same size, or be empty.\n# This is the only way to uniquely associate the joint name with the correct\n# states.\n\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\nstring[] name\nfloat64[] position\nfloat64[] velocity\nfloat64[] effort", "sensor_msgs/msg/Joy": "# Reports the state of a joystick's axes and buttons.\n\n# The timestamp is the time at which data is received from the joystick.\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\n# The axes measurements from a joystick.\nfloat32[] axes\n\n# The buttons measurements from a joystick.\nint32[] buttons", "sensor_msgs/msg/JoyFeedback": "# Declare of the type of feedback\nuint8 TYPE_LED    = 0\nuint8 TYPE_RUMBLE = 1\nuint8 TYPE_BUZZER = 2\n\nuint8 type\n\n# This will hold an id number for each type of each feedback.\n# Example, the first led would be id=0, the second would be id=1\nuint8 id\n\n# Intensity of the feedback, from 0.0 to 1.0, inclusive.  If device is\n# actually binary, driver should treat 0<=x<0.5 as off, 0.5<=x<=1 as on.\nfloat32 intensity", "sensor_msgs/msg/JoyFeedbackArray": "# This message publishes values for multiple feedback at once.\nJoyFeedback[] array\n\tuint8 TYPE_LED    = 0\n\tuint8 TYPE_RUMBLE = 1\n\tuint8 TYPE_BUZZER = 2\n\tuint8 type\n\tuint8 id\n\tfloat32 intensity", "sensor_msgs/msg/LaserEcho": "# This message is a submessage of MultiEchoLaserScan and is not intended\n# to be used separately.\n\nfloat32[] echoes  # Multiple values of ranges or intensities.\n                  # Each array represents data from the same angle increment.", "sensor_msgs/msg/LaserScan": "# Single scan from a planar laser range-finder\n#\n# If you have another ranging device with different behavior (e.g. a sonar\n# array), please find or create a different message, since applications\n# will make fairly laser-specific assumptions about this data\n\nstd_msgs/Header header # timestamp in the header is the acquisition time of\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n                             # the first ray in the scan.\n                             #\n                             # in frame frame_id, angles are measured around\n                             # the positive Z axis (counterclockwise, if Z is up)\n                             # with zero angle being forward along the x axis\n\nfloat32 angle_min            # start angle of the scan [rad]\nfloat32 angle_max            # end angle of the scan [rad]\nfloat32 angle_increment      # angular distance between measurements [rad]\n\nfloat32 time_increment       # time between measurements [seconds] - if your scanner\n                             # is moving, this will be used in interpolating position\n                             # of 3d points\nfloat32 scan_time            # time between scans [seconds]\n\nfloat32 range_min            # minimum range value [m]\nfloat32 range_max            # maximum range value [m]\n\nfloat32[] ranges             # range data [m]\n                             # (Note: values < range_min or > range_max should be discarded)\nfloat32[] intensities        # intensity data [device-specific units].  If your\n                             # device does not provide intensities, please leave\n                             # the array empty.", "sensor_msgs/msg/MagneticField": "# Measurement of the Magnetic Field vector at a specific location.\n#\n# If the covariance of the measurement is known, it should be filled in.\n# If all you know is the variance of each measurement, e.g. from the datasheet,\n# just put those along the diagonal.\n# A covariance matrix of all zeros will be interpreted as \"covariance unknown\",\n# and to use the data a covariance will have to be assumed or gotten from some\n# other source.\n\nstd_msgs/Header header               # timestamp is the time the\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n                                           # field was measured\n                                           # frame_id is the location and orientation\n                                           # of the field measurement\n\ngeometry_msgs/Vector3 magnetic_field # x, y, and z components of the\n\tfloat64 x\n\tfloat64 y\n\tfloat64 z\n                                           # field vector in Tesla\n                                           # If your sensor does not output 3 axes,\n                                           # put NaNs in the components not reported.\n\nfloat64[9] magnetic_field_covariance       # Row major about x, y, z axes\n                                           # 0 is interpreted as variance unknown", "sensor_msgs/msg/MultiDOFJointState": "# Representation of state for joints with multiple degrees of freedom,\n# following the structure of JointState which can only represent a single degree of freedom.\n#\n# It is assumed that a joint in a system corresponds to a transform that gets applied\n# along the kinematic chain. For example, a planar joint (as in URDF) is 3DOF (x, y, yaw)\n# and those 3DOF can be expressed as a transformation matrix, and that transformation\n# matrix can be converted back to (x, y, yaw)\n#\n# Each joint is uniquely identified by its name\n# The header specifies the time at which the joint states were recorded. All the joint states\n# in one message have to be recorded at the same time.\n#\n# This message consists of a multiple arrays, one for each part of the joint state.\n# The goal is to make each of the fields optional. When e.g. your joints have no\n# wrench associated with them, you can leave the wrench array empty.\n#\n# All arrays in this message should have the same size, or be empty.\n# This is the only way to uniquely associate the joint name with the correct\n# states.\n\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\nstring[] joint_names\ngeometry_msgs/Transform[] transforms\n\tVector3 translation\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tQuaternion rotation\n\t\tfloat64 x 0\n\t\tfloat64 y 0\n\t\tfloat64 z 0\n\t\tfloat64 w 1\ngeometry_msgs/Twist[] twist\n\tVector3  linear\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tVector3  angular\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\ngeometry_msgs/Wrench[] wrench\n\tVector3  force\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tVector3  torque\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z", "sensor_msgs/msg/MultiEchoLaserScan": "# Single scan from a multi-echo planar laser range-finder\n#\n# If you have another ranging device with different behavior (e.g. a sonar\n# array), please find or create a different message, since applications\n# will make fairly laser-specific assumptions about this data\n\nstd_msgs/Header header # timestamp in the header is the acquisition time of\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n                             # the first ray in the scan.\n                             #\n                             # in frame frame_id, angles are measured around\n                             # the positive Z axis (counterclockwise, if Z is up)\n                             # with zero angle being forward along the x axis\n\nfloat32 angle_min            # start angle of the scan [rad]\nfloat32 angle_max            # end angle of the scan [rad]\nfloat32 angle_increment      # angular distance between measurements [rad]\n\nfloat32 time_increment       # time between measurements [seconds] - if your scanner\n                             # is moving, this will be used in interpolating position\n                             # of 3d points\nfloat32 scan_time            # time between scans [seconds]\n\nfloat32 range_min            # minimum range value [m]\nfloat32 range_max            # maximum range value [m]\n\nLaserEcho[] ranges           # range data [m]\n\tfloat32[] echoes\n\t                  # Each array represents data from the same angle increment.\n                             # (Note: NaNs, values < range_min or > range_max should be discarded)\n                             # +Inf measurements are out of range\n                             # -Inf measurements are too close to determine exact distance.\nLaserEcho[] intensities      # intensity data [device-specific units].  If your\n\tfloat32[] echoes\n\t                  # Each array represents data from the same angle increment.\n                             # device does not provide intensities, please leave\n                             # the array empty.", "sensor_msgs/msg/NavSatFix": "# Navigation Satellite fix for any Global Navigation Satellite System\n#\n# Specified using the WGS 84 reference ellipsoid\n\n# header.stamp specifies the ROS time for this measurement (the\n#        corresponding satellite time may be reported using the\n#        sensor_msgs/TimeReference message).\n#\n# header.frame_id is the frame of reference reported by the satellite\n#        receiver, usually the location of the antenna.  This is a\n#        Euclidean frame relative to the vehicle, not a reference\n#        ellipsoid.\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\n# Satellite fix status information.\nNavSatStatus status\n\t#\n\tint8 STATUS_NO_FIX =  -1\n\tint8 STATUS_FIX =      0\n\tint8 STATUS_SBAS_FIX = 1\n\tint8 STATUS_GBAS_FIX = 2\n\tint8 status\n\tuint16 SERVICE_GPS =     1\n\tuint16 SERVICE_GLONASS = 2\n\tuint16 SERVICE_COMPASS = 4\n\tuint16 SERVICE_GALILEO = 8\n\tuint16 service\n\n# Latitude [degrees]. Positive is north of equator; negative is south.\nfloat64 latitude\n\n# Longitude [degrees]. Positive is east of prime meridian; negative is west.\nfloat64 longitude\n\n# Altitude [m]. Positive is above the WGS 84 ellipsoid\n# (quiet NaN if no altitude is available).\nfloat64 altitude\n\n# Position covariance [m^2] defined relative to a tangential plane\n# through the reported position. The components are East, North, and\n# Up (ENU), in row-major order.\n#\n# Beware: this coordinate system exhibits singularities at the poles.\nfloat64[9] position_covariance\n\n# If the covariance of the fix is known, fill it in completely. If the\n# GPS receiver provides the variance of each measurement, put them\n# along the diagonal. If only Dilution of Precision is available,\n# estimate an approximate covariance from that.\n\nuint8 COVARIANCE_TYPE_UNKNOWN = 0\nuint8 COVARIANCE_TYPE_APPROXIMATED = 1\nuint8 COVARIANCE_TYPE_DIAGONAL_KNOWN = 2\nuint8 COVARIANCE_TYPE_KNOWN = 3\n\nuint8 position_covariance_type", "sensor_msgs/msg/NavSatStatus": "# Navigation Satellite fix status for any Global Navigation Satellite System.\n#\n# Whether to output an augmented fix is determined by both the fix\n# type and the last time differential corrections were received.  A\n# fix is valid when status >= STATUS_FIX.\n\nint8 STATUS_NO_FIX =  -1        # unable to fix position\nint8 STATUS_FIX =      0        # unaugmented fix\nint8 STATUS_SBAS_FIX = 1        # with satellite-based augmentation\nint8 STATUS_GBAS_FIX = 2        # with ground-based augmentation\n\nint8 status\n\n# Bits defining which Global Navigation Satellite System signals were\n# used by the receiver.\n\nuint16 SERVICE_GPS =     1\nuint16 SERVICE_GLONASS = 2\nuint16 SERVICE_COMPASS = 4      # includes BeiDou.\nuint16 SERVICE_GALILEO = 8\n\nuint16 service", "sensor_msgs/msg/PointCloud": "## THIS MESSAGE IS DEPRECATED AS OF FOXY\n## Please use sensor_msgs/PointCloud2\n\n# This message holds a collection of 3d points, plus optional additional\n# information about each point.\n\n# Time of sensor data acquisition, coordinate frame ID.\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\n# Array of 3d points. Each Point32 should be interpreted as a 3d point\n# in the frame given in the header.\ngeometry_msgs/Point32[] points\n\t#\n\t#\n\tfloat32 x\n\tfloat32 y\n\tfloat32 z\n\n# Each channel should have the same number of elements as points array,\n# and the data in each channel should correspond 1:1 with each point.\n# Channel names in common practice are listed in ChannelFloat32.msg.\nChannelFloat32[] channels\n\t#\n\tstring name\n\tfloat32[] values", "sensor_msgs/msg/PointCloud2": "# This message holds a collection of N-dimensional points, which may\n# contain additional information such as normals, intensity, etc. The\n# point data is stored as a binary blob, its layout described by the\n# contents of the \"fields\" array.\n#\n# The point cloud data may be organized 2d (image-like) or 1d (unordered).\n# Point clouds organized as 2d images may be produced by camera depth sensors\n# such as stereo or time-of-flight.\n\n# Time of sensor data acquisition, and the coordinate frame ID (for 3d points).\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\n# 2D structure of the point cloud. If the cloud is unordered, height is\n# 1 and width is the length of the point cloud.\nuint32 height\nuint32 width\n\n# Describes the channels and their layout in the binary data blob.\nPointField[] fields\n\tuint8 INT8    = 1\n\tuint8 UINT8   = 2\n\tuint8 INT16   = 3\n\tuint8 UINT16  = 4\n\tuint8 INT32   = 5\n\tuint8 UINT32  = 6\n\tuint8 FLOAT32 = 7\n\tuint8 FLOAT64 = 8\n\tstring name\n\tuint32 offset\n\tuint8  datatype\n\tuint32 count\n\nbool    is_bigendian # Is this data bigendian?\nuint32  point_step   # Length of a point in bytes\nuint32  row_step     # Length of a row in bytes\nuint8[] data         # Actual point data, size is (row_step*height)\n\nbool is_dense        # True if there are no invalid points", "sensor_msgs/msg/PointField": "# This message holds the description of one point entry in the\n# PointCloud2 message format.\nuint8 INT8    = 1\nuint8 UINT8   = 2\nuint8 INT16   = 3\nuint8 UINT16  = 4\nuint8 INT32   = 5\nuint8 UINT32  = 6\nuint8 FLOAT32 = 7\nuint8 FLOAT64 = 8\n\n# Common PointField names are x, y, z, intensity, rgb, rgba\nstring name      # Name of field\nuint32 offset    # Offset from start of point struct\nuint8  datatype  # Datatype enumeration, see above\nuint32 count     # How many elements in the field", "sensor_msgs/msg/Range": "# Single range reading from an active ranger that emits energy and reports\n# one range reading that is valid along an arc at the distance measured.\n# This message is  not appropriate for laser scanners. See the LaserScan\n# message if you are working with a laser scanner.\n#\n# This message also can represent a fixed-distance (binary) ranger.  This\n# sensor will have min_range===max_range===distance of detection.\n# These sensors follow REP 117 and will output -Inf if the object is detected\n# and +Inf if the object is outside of the detection range.\n\nstd_msgs/Header header # timestamp in the header is the time the ranger\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n                             # returned the distance reading\n\n# Radiation type enums\n# If you want a value added to this list, send an email to the ros-users list\nuint8 ULTRASOUND=0\nuint8 INFRARED=1\n\nuint8 radiation_type    # the type of radiation used by the sensor\n                        # (sound, IR, etc) [enum]\n\nfloat32 field_of_view   # the size of the arc that the distance reading is\n                        # valid for [rad]\n                        # the object causing the range reading may have\n                        # been anywhere within -field_of_view/2 and\n                        # field_of_view/2 at the measured range.\n                        # 0 angle corresponds to the x-axis of the sensor.\n\nfloat32 min_range       # minimum range value [m]\nfloat32 max_range       # maximum range value [m]\n                        # Fixed distance rangers require min_range==max_range\n\nfloat32 range           # range data [m]\n                        # (Note: values < range_min or > range_max should be discarded)\n                        # Fixed distance rangers only output -Inf or +Inf.\n                        # -Inf represents a detection within fixed distance.\n                        # (Detection too close to the sensor to quantify)\n                        # +Inf represents no detection within the fixed distance.\n                        # (Object out of range)", "sensor_msgs/msg/RegionOfInterest": "# This message is used to specify a region of interest within an image.\n#\n# When used to specify the ROI setting of the camera when the image was\n# taken, the height and width fields should either match the height and\n# width fields for the associated image; or height = width = 0\n# indicates that the full resolution image was captured.\n\nuint32 x_offset  # Leftmost pixel of the ROI\n                 # (0 if the ROI includes the left edge of the image)\nuint32 y_offset  # Topmost pixel of the ROI\n                 # (0 if the ROI includes the top edge of the image)\nuint32 height    # Height of ROI\nuint32 width     # Width of ROI\n\n# True if a distinct rectified ROI should be calculated from the \"raw\"\n# ROI in this message. Typically this should be False if the full image\n# is captured (ROI not used), and True if a subwindow is captured (ROI\n# used).\nbool do_rectify", "sensor_msgs/msg/RelativeHumidity": "# Single reading from a relative humidity sensor.\n# Defines the ratio of partial pressure of water vapor to the saturated vapor\n# pressure at a temperature.\n\nstd_msgs/Header header # timestamp of the measurement\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n                             # frame_id is the location of the humidity sensor\n\nfloat64 relative_humidity    # Expression of the relative humidity\n                             # from 0.0 to 1.0.\n                             # 0.0 is no partial pressure of water vapor\n                             # 1.0 represents partial pressure of saturation\n\nfloat64 variance             # 0 is interpreted as variance unknown", "sensor_msgs/msg/Temperature": "# Single temperature reading.\n\nstd_msgs/Header header # timestamp is the time the temperature was measured\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n                             # frame_id is the location of the temperature reading\n\nfloat64 temperature          # Measurement of the Temperature in Degrees Celsius.\n\nfloat64 variance             # 0 is interpreted as variance unknown.", "sensor_msgs/msg/TimeReference": "# Measurement from an external time source not actively synchronized with the system clock.\n\nstd_msgs/Header header      # stamp is system time for which measurement was valid\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n                                  # frame_id is not used\n\nbuiltin_interfaces/Time time_ref  # corresponding time from this external source\n\tint32 sec\n\tuint32 nanosec\nstring source                     # (optional) name of time source", "shape_msgs/msg/Mesh": "# Definition of a mesh.\n\n# List of triangles; the index values refer to positions in vertices[].\nMeshTriangle[] triangles\n\tuint32[3] vertex_indices\n\n# The actual vertices that make up the mesh.\ngeometry_msgs/Point[] vertices\n\tfloat64 x\n\tfloat64 y\n\tfloat64 z", "shape_msgs/msg/MeshTriangle": "# Definition of a triangle's vertices.\n\nuint32[3] vertex_indices", "shape_msgs/msg/Plane": "# Representation of a plane, using the plane equation ax + by + cz + d = 0.\n#\n# a := coef[0]\n# b := coef[1]\n# c := coef[2]\n# d := coef[3]\nfloat64[4] coef", "shape_msgs/msg/SolidPrimitive": "# Defines box, sphere, cylinder, and cone.\n# All shapes are defined to have their bounding boxes centered around 0,0,0.\n\nuint8 BOX=1\nuint8 SPHERE=2\nuint8 CYLINDER=3\nuint8 CONE=4\n\n# The type of the shape\nuint8 type\n\n# The dimensions of the shape\nfloat64[<=3] dimensions  # At no point will dimensions have a length > 3.\n\n# The meaning of the shape dimensions: each constant defines the index in the 'dimensions' array.\n\n# For type BOX, the X, Y, and Z dimensions are the length of the corresponding sides of the box.\nuint8 BOX_X=0\nuint8 BOX_Y=1\nuint8 BOX_Z=2\n\n# For the SPHERE type, only one component is used, and it gives the radius of the sphere.\nuint8 SPHERE_RADIUS=0\n\n# For the CYLINDER and CONE types, the center line is oriented along the Z axis.\n# Therefore the CYLINDER_HEIGHT (CONE_HEIGHT) component of dimensions gives the\n# height of the cylinder (cone).\n# The CYLINDER_RADIUS (CONE_RADIUS) component of dimensions gives the radius of\n# the base of the cylinder (cone).\n# Cone and cylinder primitives are defined to be circular. The tip of the cone\n# is pointing up, along +Z axis.\n\nuint8 CYLINDER_HEIGHT=0\nuint8 CYLINDER_RADIUS=1\n\nuint8 CONE_HEIGHT=0\nuint8 CONE_RADIUS=1", "statistics_msgs/msg/MetricsMessage": "#############################################\n# A generic metrics message providing statistics for measurements from different sources. For example,\n# measure a system's CPU % for a given window yields the following data points over a window of time:\n#\n#   - average cpu %\n#   - std deviation\n#   - min\n#   - max\n#   - sample count\n#\n# These are all represented as different 'StatisticDataPoint's.\n#############################################\n\n# Name metric measurement source, e.g., node, topic, or process name\nstring measurement_source_name\n\n# Name of the metric being measured, e.g. cpu_percentage, free_memory_mb, message_age, etc.\nstring metrics_source\n\n# Unit of measure of the metric, e.g. percent, mb, seconds, etc.\nstring unit\n\n# Measurement window start time\nbuiltin_interfaces/Time window_start\n\tint32 sec\n\tuint32 nanosec\n\n# Measurement window end time\nbuiltin_interfaces/Time window_stop\n\tint32 sec\n\tuint32 nanosec\n\n# A list of statistics data point, defined in StatisticDataPoint.msg\nStatisticDataPoint[] statistics\n\t#\n\t#\n\t#\n\t#\n\tuint8 data_type\n\tfloat64 data", "statistics_msgs/msg/StatisticDataPoint": "#############################################\n# This holds the structure of a single data point of a StatisticDataType.\n#\n# This message is used in MetricsStatisticsMessage, defined in MetricsStatisticsMessage.msg.\n#\n# Examples of the value of data point are\n# - average size of messages received\n# - standard deviation of the period of messages published\n# - maximum age of messages published\n#\n# A value of nan represents no data is available.\n# One example is that standard deviation is only available when there are two or more data points but there is only one,\n# and in this case the value would be nan.\n# +inf and -inf are not allowed.\n#\n#############################################\n\n# The statistic type of this data point, defined in StatisticDataType.msg\n# Default value should be StatisticDataType.STATISTICS_DATA_TYPE_UNINITIALIZED (0).\nuint8 data_type\n\n# The value of the data point\nfloat64 data", "statistics_msgs/msg/StatisticDataType": "#############################################\n# This file contains the commonly used constants for the statistics data type.\n#\n# The value 0 is reserved for unitialized statistic message data type.\n# Range of values: [0, 255].\n# Unallowed values: any value that is not specified in this file.\n#\n#############################################\n\n# Constant for uninitialized\nuint8 STATISTICS_DATA_TYPE_UNINITIALIZED = 0\n\n# Allowed values\nuint8 STATISTICS_DATA_TYPE_AVERAGE = 1\nuint8 STATISTICS_DATA_TYPE_MINIMUM = 2\nuint8 STATISTICS_DATA_TYPE_MAXIMUM = 3\nuint8 STATISTICS_DATA_TYPE_STDDEV = 4\nuint8 STATISTICS_DATA_TYPE_SAMPLE_COUNT = 5", "std_msgs/msg/Bool": "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbool data", "std_msgs/msg/Byte": "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nbyte data", "std_msgs/msg/ByteMultiArray": "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\n# Please look at the MultiArrayLayout message definition for\n# documentation on all multiarrays.\n\nMultiArrayLayout  layout        # specification of data layout\n\t#\n\t#\n\t#\n\t#\n\t#\n\tMultiArrayDimension[] dim\n\t\tstring label\n\t\tuint32 size\n\t\tuint32 stride\n\tuint32 data_offset\nbyte[]            data          # array of data", "std_msgs/msg/Char": "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nchar data", "std_msgs/msg/ColorRGBA": "float32 r\nfloat32 g\nfloat32 b\nfloat32 a", "std_msgs/msg/Empty": "", "std_msgs/msg/Float32": "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nfloat32 data", "std_msgs/msg/Float32MultiArray": "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\n# Please look at the MultiArrayLayout message definition for\n# documentation on all multiarrays.\n\nMultiArrayLayout  layout        # specification of data layout\n\t#\n\t#\n\t#\n\t#\n\t#\n\tMultiArrayDimension[] dim\n\t\tstring label\n\t\tuint32 size\n\t\tuint32 stride\n\tuint32 data_offset\nfloat32[]         data          # array of data", "std_msgs/msg/Float64": "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nfloat64 data", "std_msgs/msg/Float64MultiArray": "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\n# Please look at the MultiArrayLayout message definition for\n# documentation on all multiarrays.\n\nMultiArrayLayout  layout        # specification of data layout\n\t#\n\t#\n\t#\n\t#\n\t#\n\tMultiArrayDimension[] dim\n\t\tstring label\n\t\tuint32 size\n\t\tuint32 stride\n\tuint32 data_offset\nfloat64[]         data          # array of data", "std_msgs/msg/Header": "# Standard metadata for higher-level stamped data types.\n# This is generally used to communicate timestamped data\n# in a particular coordinate frame.\n\n# Two-integer timestamp that is expressed as seconds and nanoseconds.\nbuiltin_interfaces/Time stamp\n\tint32 sec\n\tuint32 nanosec\n\n# Transform frame with which this data is associated.\nstring frame_id", "std_msgs/msg/Int16": "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nint16 data", "std_msgs/msg/Int16MultiArray": "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\n# Please look at the MultiArrayLayout message definition for\n# documentation on all multiarrays.\n\nMultiArrayLayout  layout        # specification of data layout\n\t#\n\t#\n\t#\n\t#\n\t#\n\tMultiArrayDimension[] dim\n\t\tstring label\n\t\tuint32 size\n\t\tuint32 stride\n\tuint32 data_offset\nint16[]           data          # array of data", "std_msgs/msg/Int32": "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nint32 data", "std_msgs/msg/Int32MultiArray": "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\n# Please look at the MultiArrayLayout message definition for\n# documentation on all multiarrays.\n\nMultiArrayLayout  layout        # specification of data layout\n\t#\n\t#\n\t#\n\t#\n\t#\n\tMultiArrayDimension[] dim\n\t\tstring label\n\t\tuint32 size\n\t\tuint32 stride\n\tuint32 data_offset\nint32[]           data          # array of data", "std_msgs/msg/Int64": "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nint64 data", "std_msgs/msg/Int64MultiArray": "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\n# Please look at the MultiArrayLayout message definition for\n# documentation on all multiarrays.\n\nMultiArrayLayout  layout        # specification of data layout\n\t#\n\t#\n\t#\n\t#\n\t#\n\tMultiArrayDimension[] dim\n\t\tstring label\n\t\tuint32 size\n\t\tuint32 stride\n\tuint32 data_offset\nint64[]           data          # array of data", "std_msgs/msg/Int8": "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nint8 data", "std_msgs/msg/Int8MultiArray": "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\n# Please look at the MultiArrayLayout message definition for\n# documentation on all multiarrays.\n\nMultiArrayLayout  layout        # specification of data layout\n\t#\n\t#\n\t#\n\t#\n\t#\n\tMultiArrayDimension[] dim\n\t\tstring label\n\t\tuint32 size\n\t\tuint32 stride\n\tuint32 data_offset\nint8[]            data          # array of data", "std_msgs/msg/MultiArrayDimension": "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nstring label   # label of given dimension\nuint32 size    # size of given dimension (in type units)\nuint32 stride  # stride of given dimension", "std_msgs/msg/MultiArrayLayout": "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\n# The multiarray declares a generic multi-dimensional array of a\n# particular data type.  Dimensions are ordered from outer most\n# to inner most.\n#\n# Accessors should ALWAYS be written in terms of dimension stride\n# and specified outer-most dimension first.\n#\n# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n#\n# A standard, 3-channel 640x480 image with interleaved color channels\n# would be specified as:\n#\n# dim[0].label  = \"height\"\n# dim[0].size   = 480\n# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n# dim[1].label  = \"width\"\n# dim[1].size   = 640\n# dim[1].stride = 3*640 = 1920\n# dim[2].label  = \"channel\"\n# dim[2].size   = 3\n# dim[2].stride = 3\n#\n# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n\nMultiArrayDimension[] dim # Array of dimension properties\n\tstring label\n\tuint32 size\n\tuint32 stride\nuint32 data_offset        # padding bytes at front of data", "std_msgs/msg/String": "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nstring data", "std_msgs/msg/UInt16": "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nuint16 data", "std_msgs/msg/UInt16MultiArray": "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\n# Please look at the MultiArrayLayout message definition for\n# documentation on all multiarrays.\n\nMultiArrayLayout  layout        # specification of data layout\n\t#\n\t#\n\t#\n\t#\n\t#\n\tMultiArrayDimension[] dim\n\t\tstring label\n\t\tuint32 size\n\t\tuint32 stride\n\tuint32 data_offset\nuint16[]            data        # array of data", "std_msgs/msg/UInt32": "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nuint32 data", "std_msgs/msg/UInt32MultiArray": "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\n# Please look at the MultiArrayLayout message definition for\n# documentation on all multiarrays.\n\nMultiArrayLayout  layout        # specification of data layout\n\t#\n\t#\n\t#\n\t#\n\t#\n\tMultiArrayDimension[] dim\n\t\tstring label\n\t\tuint32 size\n\t\tuint32 stride\n\tuint32 data_offset\nuint32[]          data          # array of data", "std_msgs/msg/UInt64": "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nuint64 data", "std_msgs/msg/UInt64MultiArray": "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\n# Please look at the MultiArrayLayout message definition for\n# documentation on all multiarrays.\n\nMultiArrayLayout  layout        # specification of data layout\n\t#\n\t#\n\t#\n\t#\n\t#\n\tMultiArrayDimension[] dim\n\t\tstring label\n\t\tuint32 size\n\t\tuint32 stride\n\tuint32 data_offset\nuint64[]          data          # array of data", "std_msgs/msg/UInt8": "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\nuint8 data", "std_msgs/msg/UInt8MultiArray": "# This was originally provided as an example message.\n# It is deprecated as of Foxy\n# It is recommended to create your own semantically meaningful message.\n# However if you would like to continue using this please use the equivalent in example_msgs.\n\n# Please look at the MultiArrayLayout message definition for\n# documentation on all multiarrays.\n\nMultiArrayLayout  layout        # specification of data layout\n\t#\n\t#\n\t#\n\t#\n\t#\n\tMultiArrayDimension[] dim\n\t\tstring label\n\t\tuint32 size\n\t\tuint32 stride\n\tuint32 data_offset\nuint8[]           data          # array of data", "stereo_msgs/msg/DisparityImage": "# Separate header for compatibility with current TimeSynchronizer.\n# Likely to be removed in a later release, use image.header instead.\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\n# Floating point disparity image. The disparities are pre-adjusted for any\n# x-offset between the principal points of the two cameras (in the case\n# that they are verged). That is: d = x_l - x_r - (cx_l - cx_r)\nsensor_msgs/Image image\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\t                             # Header frame_id should be optical frame of camera\n\t                             # origin of frame should be optical center of cameara\n\t                             # +x should point to the right in the image\n\t                             # +y should point down in the image\n\t                             # +z should point into to plane of the image\n\t                             # If the frame_id here and the frame_id of the CameraInfo\n\t                             # message associated with the image conflict\n\t                             # the behavior is undefined\n\tuint32 height\n\tuint32 width\n\tstring encoding\n\t                      # taken from the list of strings in include/sensor_msgs/image_encodings.hpp\n\tuint8 is_bigendian\n\tuint32 step\n\tuint8[] data\n\n# Stereo geometry. For disparity d, the depth from the camera is Z = fT/d.\nfloat32 f # Focal length, pixels\nfloat32 t # Baseline, world units\n\n# Subwindow of (potentially) valid disparity values.\nsensor_msgs/RegionOfInterest valid_window\n\t#\n\tuint32 x_offset\n\t                 # (0 if the ROI includes the left edge of the image)\n\tuint32 y_offset\n\t                 # (0 if the ROI includes the top edge of the image)\n\tuint32 height\n\tuint32 width\n\tbool do_rectify\n\n# The range of disparities searched.\n# In the disparity image, any disparity less than min_disparity is invalid.\n# The disparity search range defines the horopter, or 3D volume that the\n# stereo algorithm can \"see\". Points with Z outside of:\n#     Z_min = fT / max_disparity\n#     Z_max = fT / min_disparity\n# could not be found.\nfloat32 min_disparity\nfloat32 max_disparity\n\n# Smallest allowed disparity increment. The smallest achievable depth range\n# resolution is delta_Z = (Z^2/fT)*delta_d.\nfloat32 delta_d", "tf2_msgs/msg/TF2Error": "uint8 NO_ERROR = 0\nuint8 LOOKUP_ERROR = 1\nuint8 CONNECTIVITY_ERROR = 2\nuint8 EXTRAPOLATION_ERROR = 3\nuint8 INVALID_ARGUMENT_ERROR = 4\nuint8 TIMEOUT_ERROR = 5\nuint8 TRANSFORM_ERROR = 6\n\nuint8 error\nstring error_string", "tf2_msgs/msg/TFMessage": "geometry_msgs/TransformStamped[] transforms\n\t#\n\t#\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tstring child_frame_id\n\tTransform transform\n\t\tVector3 translation\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion rotation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1", "trajectory_msgs/msg/JointTrajectory": "# The header is used to specify the coordinate frame and the reference time for\n# the trajectory durations\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\n# The names of the active joints in each trajectory point. These names are\n# ordered and must correspond to the values in each trajectory point.\nstring[] joint_names\n\n# Array of trajectory points, which describe the positions, velocities,\n# accelerations and/or efforts of the joints at each time point.\nJointTrajectoryPoint[] points\n\tfloat64[] positions\n\tfloat64[] velocities\n\tfloat64[] accelerations\n\tfloat64[] effort\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec", "trajectory_msgs/msg/JointTrajectoryPoint": "# Each trajectory point specifies either positions[, velocities[, accelerations]]\n# or positions[, effort] for the trajectory to be executed.\n# All specified values are in the same order as the joint names in JointTrajectory.msg.\n\n# Single DOF joint positions for each joint relative to their \"0\" position.\n# The units depend on the specific joint type: radians for revolute or\n# continuous joints, and meters for prismatic joints.\nfloat64[] positions\n\n# The rate of change in position of each joint. Units are joint type dependent.\n# Radians/second for revolute or continuous joints, and meters/second for\n# prismatic joints.\nfloat64[] velocities\n\n# Rate of change in velocity of each joint. Units are joint type dependent.\n# Radians/second^2 for revolute or continuous joints, and meters/second^2 for\n# prismatic joints.\nfloat64[] accelerations\n\n# The torque or the force to be applied at each joint. For revolute/continuous\n# joints effort denotes a torque in newton-meters. For prismatic joints, effort\n# denotes a force in newtons.\nfloat64[] effort\n\n# Desired time from the trajectory start to arrive at this trajectory point.\nbuiltin_interfaces/Duration time_from_start\n\tint32 sec\n\tuint32 nanosec", "trajectory_msgs/msg/MultiDOFJointTrajectory": "# The header is used to specify the coordinate frame and the reference time for the trajectory durations\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\n# A representation of a multi-dof joint trajectory (each point is a transformation)\n# Each point along the trajectory will include an array of positions/velocities/accelerations\n# that has the same length as the array of joint names, and has the same order of joints as\n# the joint names array.\n\nstring[] joint_names\nMultiDOFJointTrajectoryPoint[] points\n\tgeometry_msgs/Transform[] transforms\n\t\tVector3 translation\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion rotation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tgeometry_msgs/Twist[] velocities\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tgeometry_msgs/Twist[] accelerations\n\t\tVector3  linear\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tVector3  angular\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\tbuiltin_interfaces/Duration time_from_start\n\t\tint32 sec\n\t\tuint32 nanosec", "trajectory_msgs/msg/MultiDOFJointTrajectoryPoint": "# Each multi-dof joint can specify a transform (up to 6 DOF).\ngeometry_msgs/Transform[] transforms\n\tVector3 translation\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tQuaternion rotation\n\t\tfloat64 x 0\n\t\tfloat64 y 0\n\t\tfloat64 z 0\n\t\tfloat64 w 1\n\n# There can be a velocity specified for the origin of the joint.\ngeometry_msgs/Twist[] velocities\n\tVector3  linear\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tVector3  angular\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\n# There can be an acceleration specified for the origin of the joint.\ngeometry_msgs/Twist[] accelerations\n\tVector3  linear\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tVector3  angular\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\n# Desired time from the trajectory start to arrive at this trajectory point.\nbuiltin_interfaces/Duration time_from_start\n\tint32 sec\n\tuint32 nanosec", "turtlesim/msg/Color": "uint8 r\nuint8 g\nuint8 b", "turtlesim/msg/Pose": "float32 x\nfloat32 y\nfloat32 theta\n\nfloat32 linear_velocity\nfloat32 angular_velocity", "unique_identifier_msgs/msg/UUID": "# A universally unique identifier (UUID).\n#\n#  http://en.wikipedia.org/wiki/Universally_unique_identifier\n#  http://tools.ietf.org/html/rfc4122.html\n\nuint8[16] uuid", "visualization_msgs/msg/ImageMarker": "int32 CIRCLE=0\nint32 LINE_STRIP=1\nint32 LINE_LIST=2\nint32 POLYGON=3\nint32 POINTS=4\n\nint32 ADD=0\nint32 REMOVE=1\n\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n# Namespace which is used with the id to form a unique id.\nstring ns\n# Unique id within the namespace.\nint32 id\n# One of the above types, e.g. CIRCLE, LINE_STRIP, etc.\nint32 type\n# Either ADD or REMOVE.\nint32 action\n# Two-dimensional coordinate position, in pixel-coordinates.\ngeometry_msgs/Point position\n\tfloat64 x\n\tfloat64 y\n\tfloat64 z\n# The scale of the object, e.g. the diameter for a CIRCLE.\nfloat32 scale\n# The outline color of the marker.\nstd_msgs/ColorRGBA outline_color\n\tfloat32 r\n\tfloat32 g\n\tfloat32 b\n\tfloat32 a\n# Whether or not to fill in the shape with color.\nuint8 filled\n# Fill color; in the range: [0.0-1.0]\nstd_msgs/ColorRGBA fill_color\n\tfloat32 r\n\tfloat32 g\n\tfloat32 b\n\tfloat32 a\n# How long the object should last before being automatically deleted.\n# 0 indicates forever.\nbuiltin_interfaces/Duration lifetime\n\tint32 sec\n\tuint32 nanosec\n\n# Coordinates in 2D in pixel coords. Used for LINE_STRIP, LINE_LIST, POINTS, etc.\ngeometry_msgs/Point[] points\n\tfloat64 x\n\tfloat64 y\n\tfloat64 z\n# The color for each line, point, etc. in the points field.\nstd_msgs/ColorRGBA[] outline_colors\n\tfloat32 r\n\tfloat32 g\n\tfloat32 b\n\tfloat32 a", "visualization_msgs/msg/InteractiveMarker": "# Time/frame info.\n# If header.time is set to 0, the marker will be retransformed into\n# its frame on each timestep. You will receive the pose feedback\n# in the same frame.\n# Otherwise, you might receive feedback in a different frame.\n# For rviz, this will be the current 'fixed frame' set by the user.\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\n# Initial pose. Also, defines the pivot point for rotations.\ngeometry_msgs/Pose pose\n\tPoint position\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tQuaternion orientation\n\t\tfloat64 x 0\n\t\tfloat64 y 0\n\t\tfloat64 z 0\n\t\tfloat64 w 1\n\n# Identifying string. Must be globally unique in\n# the topic that this message is sent through.\nstring name\n\n# Short description (< 40 characters).\nstring description\n\n# Scale to be used for default controls (default=1).\nfloat32 scale\n\n# All menu and submenu entries associated with this marker.\nMenuEntry[] menu_entries\n\t#\n\t#\n\t#\n\tuint32 id\n\tuint32 parent_id\n\tstring title\n\tstring command\n\tuint8 FEEDBACK=0\n\tuint8 ROSRUN=1\n\tuint8 ROSLAUNCH=2\n\tuint8 command_type\n\n# List of controls displayed for this marker.\nInteractiveMarkerControl[] controls\n\tstring name\n\tgeometry_msgs/Quaternion orientation\n\t\tfloat64 x 0\n\t\tfloat64 y 0\n\t\tfloat64 z 0\n\t\tfloat64 w 1\n\tuint8 INHERIT = 0\n\tuint8 FIXED = 1\n\tuint8 VIEW_FACING = 2\n\tuint8 orientation_mode\n\t#\n\tuint8 NONE = 0\n\tuint8 MENU = 1\n\tuint8 BUTTON = 2\n\tuint8 MOVE_AXIS = 3\n\tuint8 MOVE_PLANE = 4\n\tuint8 ROTATE_AXIS = 5\n\tuint8 MOVE_ROTATE = 6\n\tuint8 MOVE_3D = 7\n\tuint8 ROTATE_3D = 8\n\tuint8 MOVE_ROTATE_3D = 9\n\tuint8 interaction_mode\n\tbool always_visible\n\t#\n\tMarker[] markers\n\t\t#\n\t\tint32 ARROW=0\n\t\tint32 CUBE=1\n\t\tint32 SPHERE=2\n\t\tint32 CYLINDER=3\n\t\tint32 LINE_STRIP=4\n\t\tint32 LINE_LIST=5\n\t\tint32 CUBE_LIST=6\n\t\tint32 SPHERE_LIST=7\n\t\tint32 POINTS=8\n\t\tint32 TEXT_VIEW_FACING=9\n\t\tint32 MESH_RESOURCE=10\n\t\tint32 TRIANGLE_LIST=11\n\t\tint32 ADD=0\n\t\tint32 MODIFY=0\n\t\tint32 DELETE=2\n\t\tint32 DELETEALL=3\n\t\tstd_msgs/Header header\n\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tstring frame_id\n\t\tstring ns\n\t\tint32 id\n\t\tint32 type\n\t\tint32 action\n\t\tgeometry_msgs/Pose pose\n\t\t\tPoint position\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tQuaternion orientation\n\t\t\t\tfloat64 x 0\n\t\t\t\tfloat64 y 0\n\t\t\t\tfloat64 z 0\n\t\t\t\tfloat64 w 1\n\t\tgeometry_msgs/Vector3 scale\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tstd_msgs/ColorRGBA color\n\t\t\tfloat32 r\n\t\t\tfloat32 g\n\t\t\tfloat32 b\n\t\t\tfloat32 a\n\t\tbuiltin_interfaces/Duration lifetime\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tbool frame_locked\n\t\tgeometry_msgs/Point[] points\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tstd_msgs/ColorRGBA[] colors\n\t\t\tfloat32 r\n\t\t\tfloat32 g\n\t\t\tfloat32 b\n\t\t\tfloat32 a\n\t\tstring text\n\t\tstring mesh_resource\n\t\tbool mesh_use_embedded_materials\n\tbool independent_marker_orientation\n\tstring description", "visualization_msgs/msg/InteractiveMarkerControl": "# Represents a control that is to be displayed together with an interactive marker\n\n# Identifying string for this control.\n# You need to assign a unique value to this to receive feedback from the GUI\n# on what actions the user performs on this control (e.g. a button click).\nstring name\n\n\n# Defines the local coordinate frame (relative to the pose of the parent\n# interactive marker) in which is being rotated and translated.\n# Default: Identity\ngeometry_msgs/Quaternion orientation\n\tfloat64 x 0\n\tfloat64 y 0\n\tfloat64 z 0\n\tfloat64 w 1\n\n\n# Orientation mode: controls how orientation changes.\n# INHERIT: Follow orientation of interactive marker\n# FIXED: Keep orientation fixed at initial state\n# VIEW_FACING: Align y-z plane with screen (x: forward, y:left, z:up).\nuint8 INHERIT = 0\nuint8 FIXED = 1\nuint8 VIEW_FACING = 2\n\nuint8 orientation_mode\n\n# Interaction mode for this control\n#\n# NONE: This control is only meant for visualization; no context menu.\n# MENU: Like NONE, but right-click menu is active.\n# BUTTON: Element can be left-clicked.\n# MOVE_AXIS: Translate along local x-axis.\n# MOVE_PLANE: Translate in local y-z plane.\n# ROTATE_AXIS: Rotate around local x-axis.\n# MOVE_ROTATE: Combines MOVE_PLANE and ROTATE_AXIS.\nuint8 NONE = 0\nuint8 MENU = 1\nuint8 BUTTON = 2\nuint8 MOVE_AXIS = 3\nuint8 MOVE_PLANE = 4\nuint8 ROTATE_AXIS = 5\nuint8 MOVE_ROTATE = 6\n# \"3D\" interaction modes work with the mouse+SHIFT+CTRL or with 3D cursors.\n# MOVE_3D: Translate freely in 3D space.\n# ROTATE_3D: Rotate freely in 3D space about the origin of parent frame.\n# MOVE_ROTATE_3D: Full 6-DOF freedom of translation and rotation about the cursor origin.\nuint8 MOVE_3D = 7\nuint8 ROTATE_3D = 8\nuint8 MOVE_ROTATE_3D = 9\n\nuint8 interaction_mode\n\n\n# If true, the contained markers will also be visible\n# when the gui is not in interactive mode.\nbool always_visible\n\n\n# Markers to be displayed as custom visual representation.\n# Leave this empty to use the default control handles.\n#\n# Note:\n# - The markers can be defined in an arbitrary coordinate frame,\n#   but will be transformed into the local frame of the interactive marker.\n# - If the header of a marker is empty, its pose will be interpreted as\n#   relative to the pose of the parent interactive marker.\nMarker[] markers\n\t#\n\tint32 ARROW=0\n\tint32 CUBE=1\n\tint32 SPHERE=2\n\tint32 CYLINDER=3\n\tint32 LINE_STRIP=4\n\tint32 LINE_LIST=5\n\tint32 CUBE_LIST=6\n\tint32 SPHERE_LIST=7\n\tint32 POINTS=8\n\tint32 TEXT_VIEW_FACING=9\n\tint32 MESH_RESOURCE=10\n\tint32 TRIANGLE_LIST=11\n\tint32 ADD=0\n\tint32 MODIFY=0\n\tint32 DELETE=2\n\tint32 DELETEALL=3\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tstring ns\n\tint32 id\n\tint32 type\n\tint32 action\n\tgeometry_msgs/Pose pose\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tgeometry_msgs/Vector3 scale\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tstd_msgs/ColorRGBA color\n\t\tfloat32 r\n\t\tfloat32 g\n\t\tfloat32 b\n\t\tfloat32 a\n\tbuiltin_interfaces/Duration lifetime\n\t\tint32 sec\n\t\tuint32 nanosec\n\tbool frame_locked\n\tgeometry_msgs/Point[] points\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tstd_msgs/ColorRGBA[] colors\n\t\tfloat32 r\n\t\tfloat32 g\n\t\tfloat32 b\n\t\tfloat32 a\n\tstring text\n\tstring mesh_resource\n\tbool mesh_use_embedded_materials\n\n\n# In VIEW_FACING mode, set this to true if you don't want the markers\n# to be aligned with the camera view point. The markers will show up\n# as in INHERIT mode.\nbool independent_marker_orientation\n\n\n# Short description (< 40 characters) of what this control does,\n# e.g. \"Move the robot\".\n# Default: A generic description based on the interaction mode\nstring description", "visualization_msgs/msg/InteractiveMarkerFeedback": "# Time/frame info.\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\n# Identifying string. Must be unique in the topic namespace.\nstring client_id\n\n# Feedback message sent back from the GUI, e.g.\n# when the status of an interactive marker was modified by the user.\n\n# Specifies which interactive marker and control this message refers to\nstring marker_name\nstring control_name\n\n# Type of the event\n# KEEP_ALIVE: sent while dragging to keep up control of the marker\n# MENU_SELECT: a menu entry has been selected\n# BUTTON_CLICK: a button control has been clicked\n# POSE_UPDATE: the pose has been changed using one of the controls\nuint8 KEEP_ALIVE = 0\nuint8 POSE_UPDATE = 1\nuint8 MENU_SELECT = 2\nuint8 BUTTON_CLICK = 3\n\nuint8 MOUSE_DOWN = 4\nuint8 MOUSE_UP = 5\n\nuint8 event_type\n\n# Current pose of the marker\n# Note: Has to be valid for all feedback types.\ngeometry_msgs/Pose pose\n\tPoint position\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tQuaternion orientation\n\t\tfloat64 x 0\n\t\tfloat64 y 0\n\t\tfloat64 z 0\n\t\tfloat64 w 1\n\n# Contains the ID of the selected menu entry\n# Only valid for MENU_SELECT events.\nuint32 menu_entry_id\n\n# If event_type is BUTTON_CLICK, MOUSE_DOWN, or MOUSE_UP, mouse_point\n# may contain the 3 dimensional position of the event on the\n# control.  If it does, mouse_point_valid will be true.  mouse_point\n# will be relative to the frame listed in the header.\ngeometry_msgs/Point mouse_point\n\tfloat64 x\n\tfloat64 y\n\tfloat64 z\nbool mouse_point_valid", "visualization_msgs/msg/InteractiveMarkerInit": "# Identifying string. Must be unique in the topic namespace\n# that this server works on.\nstring server_id\n\n# Sequence number.\n# The client will use this to detect if it has missed a subsequent\n# update.  Every update message will have the same sequence number as\n# an init message.  Clients will likely want to unsubscribe from the\n# init topic after a successful initialization to avoid receiving\n# duplicate data.\nuint64 seq_num\n\n# All markers.\nInteractiveMarker[] markers\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tgeometry_msgs/Pose pose\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tstring name\n\tstring description\n\tfloat32 scale\n\tMenuEntry[] menu_entries\n\t\t#\n\t\t#\n\t\t#\n\t\tuint32 id\n\t\tuint32 parent_id\n\t\tstring title\n\t\tstring command\n\t\tuint8 FEEDBACK=0\n\t\tuint8 ROSRUN=1\n\t\tuint8 ROSLAUNCH=2\n\t\tuint8 command_type\n\tInteractiveMarkerControl[] controls\n\t\tstring name\n\t\tgeometry_msgs/Quaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\t\tuint8 INHERIT = 0\n\t\tuint8 FIXED = 1\n\t\tuint8 VIEW_FACING = 2\n\t\tuint8 orientation_mode\n\t\t#\n\t\tuint8 NONE = 0\n\t\tuint8 MENU = 1\n\t\tuint8 BUTTON = 2\n\t\tuint8 MOVE_AXIS = 3\n\t\tuint8 MOVE_PLANE = 4\n\t\tuint8 ROTATE_AXIS = 5\n\t\tuint8 MOVE_ROTATE = 6\n\t\tuint8 MOVE_3D = 7\n\t\tuint8 ROTATE_3D = 8\n\t\tuint8 MOVE_ROTATE_3D = 9\n\t\tuint8 interaction_mode\n\t\tbool always_visible\n\t\t#\n\t\tMarker[] markers\n\t\t\t#\n\t\t\tint32 ARROW=0\n\t\t\tint32 CUBE=1\n\t\t\tint32 SPHERE=2\n\t\t\tint32 CYLINDER=3\n\t\t\tint32 LINE_STRIP=4\n\t\t\tint32 LINE_LIST=5\n\t\t\tint32 CUBE_LIST=6\n\t\t\tint32 SPHERE_LIST=7\n\t\t\tint32 POINTS=8\n\t\t\tint32 TEXT_VIEW_FACING=9\n\t\t\tint32 MESH_RESOURCE=10\n\t\t\tint32 TRIANGLE_LIST=11\n\t\t\tint32 ADD=0\n\t\t\tint32 MODIFY=0\n\t\t\tint32 DELETE=2\n\t\t\tint32 DELETEALL=3\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring ns\n\t\t\tint32 id\n\t\t\tint32 type\n\t\t\tint32 action\n\t\t\tgeometry_msgs/Pose pose\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tgeometry_msgs/Vector3 scale\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tstd_msgs/ColorRGBA color\n\t\t\t\tfloat32 r\n\t\t\t\tfloat32 g\n\t\t\t\tfloat32 b\n\t\t\t\tfloat32 a\n\t\t\tbuiltin_interfaces/Duration lifetime\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tbool frame_locked\n\t\t\tgeometry_msgs/Point[] points\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tstd_msgs/ColorRGBA[] colors\n\t\t\t\tfloat32 r\n\t\t\t\tfloat32 g\n\t\t\t\tfloat32 b\n\t\t\t\tfloat32 a\n\t\t\tstring text\n\t\t\tstring mesh_resource\n\t\t\tbool mesh_use_embedded_materials\n\t\tbool independent_marker_orientation\n\t\tstring description", "visualization_msgs/msg/InteractiveMarkerPose": "\n# Time/frame info.\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n\n# Initial pose. Also, defines the pivot point for rotations.\ngeometry_msgs/Pose pose\n\tPoint position\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tQuaternion orientation\n\t\tfloat64 x 0\n\t\tfloat64 y 0\n\t\tfloat64 z 0\n\t\tfloat64 w 1\n\n# Identifying string. Must be globally unique in\n# the topic that this message is sent through.\nstring name", "visualization_msgs/msg/InteractiveMarkerUpdate": "\n# Identifying string. Must be unique in the topic namespace\n# that this server works on.\nstring server_id\n\n# Sequence number.\n# The client will use this to detect if it has missed an update.\nuint64 seq_num\n\n# Type holds the purpose of this message.  It must be one of UPDATE or KEEP_ALIVE.\n# UPDATE: Incremental update to previous state.\n#         The sequence number must be 1 higher than for\n#         the previous update.\n# KEEP_ALIVE: Indicates the that the server is still living.\n#             The sequence number does not increase.\n#             No payload data should be filled out (markers, poses, or erases).\nuint8 KEEP_ALIVE = 0\nuint8 UPDATE = 1\n\nuint8 type\n\n# Note: No guarantees on the order of processing.\n#       Contents must be kept consistent by sender.\n\n# Markers to be added or updated\nInteractiveMarker[] markers\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tgeometry_msgs/Pose pose\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tstring name\n\tstring description\n\tfloat32 scale\n\tMenuEntry[] menu_entries\n\t\t#\n\t\t#\n\t\t#\n\t\tuint32 id\n\t\tuint32 parent_id\n\t\tstring title\n\t\tstring command\n\t\tuint8 FEEDBACK=0\n\t\tuint8 ROSRUN=1\n\t\tuint8 ROSLAUNCH=2\n\t\tuint8 command_type\n\tInteractiveMarkerControl[] controls\n\t\tstring name\n\t\tgeometry_msgs/Quaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\t\tuint8 INHERIT = 0\n\t\tuint8 FIXED = 1\n\t\tuint8 VIEW_FACING = 2\n\t\tuint8 orientation_mode\n\t\t#\n\t\tuint8 NONE = 0\n\t\tuint8 MENU = 1\n\t\tuint8 BUTTON = 2\n\t\tuint8 MOVE_AXIS = 3\n\t\tuint8 MOVE_PLANE = 4\n\t\tuint8 ROTATE_AXIS = 5\n\t\tuint8 MOVE_ROTATE = 6\n\t\tuint8 MOVE_3D = 7\n\t\tuint8 ROTATE_3D = 8\n\t\tuint8 MOVE_ROTATE_3D = 9\n\t\tuint8 interaction_mode\n\t\tbool always_visible\n\t\t#\n\t\tMarker[] markers\n\t\t\t#\n\t\t\tint32 ARROW=0\n\t\t\tint32 CUBE=1\n\t\t\tint32 SPHERE=2\n\t\t\tint32 CYLINDER=3\n\t\t\tint32 LINE_STRIP=4\n\t\t\tint32 LINE_LIST=5\n\t\t\tint32 CUBE_LIST=6\n\t\t\tint32 SPHERE_LIST=7\n\t\t\tint32 POINTS=8\n\t\t\tint32 TEXT_VIEW_FACING=9\n\t\t\tint32 MESH_RESOURCE=10\n\t\t\tint32 TRIANGLE_LIST=11\n\t\t\tint32 ADD=0\n\t\t\tint32 MODIFY=0\n\t\t\tint32 DELETE=2\n\t\t\tint32 DELETEALL=3\n\t\t\tstd_msgs/Header header\n\t\t\t\tbuiltin_interfaces/Time stamp\n\t\t\t\t\tint32 sec\n\t\t\t\t\tuint32 nanosec\n\t\t\t\tstring frame_id\n\t\t\tstring ns\n\t\t\tint32 id\n\t\t\tint32 type\n\t\t\tint32 action\n\t\t\tgeometry_msgs/Pose pose\n\t\t\t\tPoint position\n\t\t\t\t\tfloat64 x\n\t\t\t\t\tfloat64 y\n\t\t\t\t\tfloat64 z\n\t\t\t\tQuaternion orientation\n\t\t\t\t\tfloat64 x 0\n\t\t\t\t\tfloat64 y 0\n\t\t\t\t\tfloat64 z 0\n\t\t\t\t\tfloat64 w 1\n\t\t\tgeometry_msgs/Vector3 scale\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tstd_msgs/ColorRGBA color\n\t\t\t\tfloat32 r\n\t\t\t\tfloat32 g\n\t\t\t\tfloat32 b\n\t\t\t\tfloat32 a\n\t\t\tbuiltin_interfaces/Duration lifetime\n\t\t\t\tint32 sec\n\t\t\t\tuint32 nanosec\n\t\t\tbool frame_locked\n\t\t\tgeometry_msgs/Point[] points\n\t\t\t\tfloat64 x\n\t\t\t\tfloat64 y\n\t\t\t\tfloat64 z\n\t\t\tstd_msgs/ColorRGBA[] colors\n\t\t\t\tfloat32 r\n\t\t\t\tfloat32 g\n\t\t\t\tfloat32 b\n\t\t\t\tfloat32 a\n\t\t\tstring text\n\t\t\tstring mesh_resource\n\t\t\tbool mesh_use_embedded_materials\n\t\tbool independent_marker_orientation\n\t\tstring description\n\n# Poses of markers that should be moved\nInteractiveMarkerPose[] poses\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tgeometry_msgs/Pose pose\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tstring name\n\n# Names of markers to be erased\nstring[] erases", "visualization_msgs/msg/Marker": "# See:\n#  - http://www.ros.org/wiki/rviz/DisplayTypes/Marker\n#  - http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes\n#\n# for more information on using this message with rviz.\n\nint32 ARROW=0\nint32 CUBE=1\nint32 SPHERE=2\nint32 CYLINDER=3\nint32 LINE_STRIP=4\nint32 LINE_LIST=5\nint32 CUBE_LIST=6\nint32 SPHERE_LIST=7\nint32 POINTS=8\nint32 TEXT_VIEW_FACING=9\nint32 MESH_RESOURCE=10\nint32 TRIANGLE_LIST=11\n\nint32 ADD=0\nint32 MODIFY=0\nint32 DELETE=2\nint32 DELETEALL=3\n\n# Header for timestamp and frame id.\nstd_msgs/Header header\n\tbuiltin_interfaces/Time stamp\n\t\tint32 sec\n\t\tuint32 nanosec\n\tstring frame_id\n# Namespace in which to place the object.\n# Used in conjunction with id to create a unique name for the object.\nstring ns\n# Object ID used in conjunction with the namespace for manipulating and deleting the object later.\nint32 id\n# Type of object.\nint32 type\n# Action to take; one of:\n#  - 0 add/modify an object\n#  - 1 (deprecated)\n#  - 2 deletes an object\n#  - 3 deletes all objects\nint32 action\n# Pose of the object with respect the frame_id specified in the header.\ngeometry_msgs/Pose pose\n\tPoint position\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tQuaternion orientation\n\t\tfloat64 x 0\n\t\tfloat64 y 0\n\t\tfloat64 z 0\n\t\tfloat64 w 1\n# Scale of the object; 1,1,1 means default (usually 1 meter square).\ngeometry_msgs/Vector3 scale\n\tfloat64 x\n\tfloat64 y\n\tfloat64 z\n# Color of the object; in the range: [0.0-1.0]\nstd_msgs/ColorRGBA color\n\tfloat32 r\n\tfloat32 g\n\tfloat32 b\n\tfloat32 a\n# How long the object should last before being automatically deleted.\n# 0 indicates forever.\nbuiltin_interfaces/Duration lifetime\n\tint32 sec\n\tuint32 nanosec\n# If this marker should be frame-locked, i.e. retransformed into its frame every timestep.\nbool frame_locked\n\n# Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, etc.)\ngeometry_msgs/Point[] points\n\tfloat64 x\n\tfloat64 y\n\tfloat64 z\n# Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, etc.)\n# The number of colors provided must either be 0 or equal to the number of points provided.\n# NOTE: alpha is not yet used\nstd_msgs/ColorRGBA[] colors\n\tfloat32 r\n\tfloat32 g\n\tfloat32 b\n\tfloat32 a\n\n# Only used for text markers\nstring text\n\n# Only used for MESH_RESOURCE markers.\nstring mesh_resource\nbool mesh_use_embedded_materials", "visualization_msgs/msg/MarkerArray": "Marker[] markers\n\t#\n\tint32 ARROW=0\n\tint32 CUBE=1\n\tint32 SPHERE=2\n\tint32 CYLINDER=3\n\tint32 LINE_STRIP=4\n\tint32 LINE_LIST=5\n\tint32 CUBE_LIST=6\n\tint32 SPHERE_LIST=7\n\tint32 POINTS=8\n\tint32 TEXT_VIEW_FACING=9\n\tint32 MESH_RESOURCE=10\n\tint32 TRIANGLE_LIST=11\n\tint32 ADD=0\n\tint32 MODIFY=0\n\tint32 DELETE=2\n\tint32 DELETEALL=3\n\tstd_msgs/Header header\n\t\tbuiltin_interfaces/Time stamp\n\t\t\tint32 sec\n\t\t\tuint32 nanosec\n\t\tstring frame_id\n\tstring ns\n\tint32 id\n\tint32 type\n\tint32 action\n\tgeometry_msgs/Pose pose\n\t\tPoint position\n\t\t\tfloat64 x\n\t\t\tfloat64 y\n\t\t\tfloat64 z\n\t\tQuaternion orientation\n\t\t\tfloat64 x 0\n\t\t\tfloat64 y 0\n\t\t\tfloat64 z 0\n\t\t\tfloat64 w 1\n\tgeometry_msgs/Vector3 scale\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tstd_msgs/ColorRGBA color\n\t\tfloat32 r\n\t\tfloat32 g\n\t\tfloat32 b\n\t\tfloat32 a\n\tbuiltin_interfaces/Duration lifetime\n\t\tint32 sec\n\t\tuint32 nanosec\n\tbool frame_locked\n\tgeometry_msgs/Point[] points\n\t\tfloat64 x\n\t\tfloat64 y\n\t\tfloat64 z\n\tstd_msgs/ColorRGBA[] colors\n\t\tfloat32 r\n\t\tfloat32 g\n\t\tfloat32 b\n\t\tfloat32 a\n\tstring text\n\tstring mesh_resource\n\tbool mesh_use_embedded_materials", "visualization_msgs/msg/MenuEntry": "# MenuEntry message.\n#\n# Each InteractiveMarker message has an array of MenuEntry messages.\n# A collection of MenuEntries together describe a\n# menu/submenu/subsubmenu/etc tree, though they are stored in a flat\n# array.  The tree structure is represented by giving each menu entry\n# an ID number and a \"parent_id\" field.  Top-level entries are the\n# ones with parent_id = 0.  Menu entries are ordered within their\n# level the same way they are ordered in the containing array.  Parent\n# entries must appear before their children.\n#\n# Example:\n# - id = 3\n#   parent_id = 0\n#   title = \"fun\"\n# - id = 2\n#   parent_id = 0\n#   title = \"robot\"\n# - id = 4\n#   parent_id = 2\n#   title = \"pr2\"\n# - id = 5\n#   parent_id = 2\n#   title = \"turtle\"\n#\n# Gives a menu tree like this:\n#  - fun\n#  - robot\n#    - pr2\n#    - turtle\n\n# ID is a number for each menu entry.  Must be unique within the\n# control, and should never be 0.\nuint32 id\n\n# ID of the parent of this menu entry, if it is a submenu.  If this\n# menu entry is a top-level entry, set parent_id to 0.\nuint32 parent_id\n\n# menu / entry title\nstring title\n\n# Arguments to command indicated by command_type (below)\nstring command\n\n# Command_type stores the type of response desired when this menu\n# entry is clicked.\n# FEEDBACK: send an InteractiveMarkerFeedback message with menu_entry_id set to this entry's id.\n# ROSRUN: execute \"rosrun\" with arguments given in the command field (above).\n# ROSLAUNCH: execute \"roslaunch\" with arguments given in the command field (above).\nuint8 FEEDBACK=0\nuint8 ROSRUN=1\nuint8 ROSLAUNCH=2\nuint8 command_type"}